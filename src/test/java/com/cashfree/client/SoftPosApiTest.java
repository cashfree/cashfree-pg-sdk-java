/*
 * Cashfree Payment Gateway APIs
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2022-09-01
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cashfree.client;

import com.cashfree.ApiException;
import com.cashfree.model.ApiError;
import com.cashfree.model.ApiError404;
import com.cashfree.model.ApiError409;
import com.cashfree.model.AuthenticationError;
import com.cashfree.model.BadRequestError;
import com.cashfree.model.CreateTerminalRequest;
import com.cashfree.model.CreateTerminalTransactionRequest;
import com.cashfree.model.FetchTerminalQRCodesEntity;
import com.cashfree.model.IdempotencyError;
import com.cashfree.model.RateLimitError;
import com.cashfree.model.TerminalEntity;
import com.cashfree.model.TerminalTransactionEntity;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SoftPosApi
 */
@Disabled
public class SoftPosApiTest {

    private final SoftPosApi api = new SoftPosApi();

    /**
     * Create Terminal
     *
     * Use this API to create new terminals to use softPOS.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sposCreateTerminalTest() throws ApiException {
        String xApiVersion = null;
        CreateTerminalRequest createTerminalRequest = null;
        String xRequestId = null;
        UUID xIdempotencyKey = null;
        TerminalEntity response = api.sposCreateTerminal(xApiVersion, createTerminalRequest, xRequestId, xIdempotencyKey);
        // TODO: test validations
    }

    /**
     * Create Terminal
     *
     * Use this API to create a new terminal transaction. To use this API you should first create an order using the Create Order API. Also, you need to enter the terminal details while creating the order and pass the same terminal information while creating a transaction using the below mentioned API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sposCreateTerminalTransactionTest() throws ApiException {
        String xApiVersion = null;
        CreateTerminalTransactionRequest createTerminalTransactionRequest = null;
        String xRequestId = null;
        UUID xIdempotencyKey = null;
        TerminalTransactionEntity response = api.sposCreateTerminalTransaction(xApiVersion, createTerminalTransactionRequest, xRequestId, xIdempotencyKey);
        // TODO: test validations
    }

    /**
     * Get terminal status using phone number
     *
     * Use this API to view all details of a terminal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sposFetchTerminalTest() throws ApiException {
        String xApiVersion = null;
        String terminalPhoneNo = null;
        String xRequestId = null;
        UUID xIdempotencyKey = null;
        TerminalEntity response = api.sposFetchTerminal(xApiVersion, terminalPhoneNo, xRequestId, xIdempotencyKey);
        // TODO: test validations
    }

    /**
     * Fetch Terminal QR Codes
     *
     * You can fetch all the StaticQRs corresponding to given terminal id or phone number. Provide either the terminal_phone_no or terminal_id in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sposFetchTerminalQRCodesTest() throws ApiException {
        String xApiVersion = null;
        String terminalPhoneNo = null;
        String cfTerminalId = null;
        String xRequestId = null;
        UUID xIdempotencyKey = null;
        List<FetchTerminalQRCodesEntity> response = api.sposFetchTerminalQRCodes(xApiVersion, terminalPhoneNo, cfTerminalId, xRequestId, xIdempotencyKey);
        // TODO: test validations
    }

}
