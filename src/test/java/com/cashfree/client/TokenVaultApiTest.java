/*
 * Cashfree Payment Gateway APIs
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2022-09-01
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cashfree.client;

import com.cashfree.ApiException;
import com.cashfree.model.ApiError;
import com.cashfree.model.ApiError404;
import com.cashfree.model.ApiError409;
import com.cashfree.model.ApiError502;
import com.cashfree.model.AuthenticationError;
import com.cashfree.model.BadRequestError;
import com.cashfree.model.CryptogramEntity;
import com.cashfree.model.IdempotencyError;
import com.cashfree.model.InstrumentEntity;
import com.cashfree.model.RateLimitError;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TokenVaultApi
 */
@Disabled
public class TokenVaultApiTest {

    private final TokenVaultApi api = new TokenVaultApi();

    /**
     * Delete Saved Card Instrument
     *
     * Use this API to delete a saved card instrument for a customer_id and instrument_id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pGCustomerDeleteInstrumentTest() throws ApiException {
        String xApiVersion = null;
        String customerId = null;
        String instrumentId = null;
        String xRequestId = null;
        UUID xIdempotencyKey = null;
        InstrumentEntity response = api.pGCustomerDeleteInstrument(xApiVersion, customerId, instrumentId, xRequestId, xIdempotencyKey);
        // TODO: test validations
    }

    /**
     * Fetch Specific Saved Card Instrument
     *
     * Use this API to fetch a single specific saved card for a customer_id by it&#39;s instrument_id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pGCustomerFetchInstrumentTest() throws ApiException {
        String xApiVersion = null;
        String customerId = null;
        String instrumentId = null;
        String xRequestId = null;
        UUID xIdempotencyKey = null;
        InstrumentEntity response = api.pGCustomerFetchInstrument(xApiVersion, customerId, instrumentId, xRequestId, xIdempotencyKey);
        // TODO: test validations
    }

    /**
     * Fetch All Saved Card Instrument
     *
     * Use this API to fetch saved cards for a customer_id 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pGCustomerFetchInstrumentsTest() throws ApiException {
        String xApiVersion = null;
        String customerId = null;
        String instrumentType = null;
        String xRequestId = null;
        UUID xIdempotencyKey = null;
        List<InstrumentEntity> response = api.pGCustomerFetchInstruments(xApiVersion, customerId, instrumentType, xRequestId, xIdempotencyKey);
        // TODO: test validations
    }

    /**
     * Fetch cryptogram for a saved card instrument
     *
     * Use this API To get the card network token, token expiry and cryptogram for a saved card instrument using instrument id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pGCustomerInstrumentsFetchCryptogramTest() throws ApiException {
        String xApiVersion = null;
        String customerId = null;
        String instrumentId = null;
        String xRequestId = null;
        UUID xIdempotencyKey = null;
        CryptogramEntity response = api.pGCustomerInstrumentsFetchCryptogram(xApiVersion, customerId, instrumentId, xRequestId, xIdempotencyKey);
        // TODO: test validations
    }

}
