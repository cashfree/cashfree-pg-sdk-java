/*
 * Cashfree Payment Gateway APIs
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2025-01-01
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cashfree.pg.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.cashfree.pg.JSON;

/**
 * SettlementReconEntityDataInnerEventDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-24T11:05:00.475310Z[Etc/UTC]")
public class SettlementReconEntityDataInnerEventDetails {
  public static final String SERIALIZED_NAME_EVENT_ID = "event_id";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private String eventId;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "event_type";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_EVENT_SETTLEMENT_AMOUNT = "event_settlement_amount";
  @SerializedName(SERIALIZED_NAME_EVENT_SETTLEMENT_AMOUNT)
  private BigDecimal eventSettlementAmount;

  public static final String SERIALIZED_NAME_EVENT_AMOUNT = "event_amount";
  @SerializedName(SERIALIZED_NAME_EVENT_AMOUNT)
  private BigDecimal eventAmount;

  public static final String SERIALIZED_NAME_SALE_TYPE = "sale_type";
  @SerializedName(SERIALIZED_NAME_SALE_TYPE)
  private String saleType;

  public static final String SERIALIZED_NAME_EVENT_STATUS = "event_status";
  @SerializedName(SERIALIZED_NAME_EVENT_STATUS)
  private String eventStatus;

  public static final String SERIALIZED_NAME_ENTITY = "entity";
  @SerializedName(SERIALIZED_NAME_ENTITY)
  private String entity;

  public static final String SERIALIZED_NAME_EVENT_TIME = "event_time";
  @SerializedName(SERIALIZED_NAME_EVENT_TIME)
  private String eventTime;

  public static final String SERIALIZED_NAME_EVENT_CURRENCY = "event_currency";
  @SerializedName(SERIALIZED_NAME_EVENT_CURRENCY)
  private String eventCurrency;

  public static final String SERIALIZED_NAME_EVENT_SERVICE_CHARGE = "event_service_charge";
  @SerializedName(SERIALIZED_NAME_EVENT_SERVICE_CHARGE)
  private BigDecimal eventServiceCharge;

  public static final String SERIALIZED_NAME_EVENT_SERVICE_TAX = "event_service_tax";
  @SerializedName(SERIALIZED_NAME_EVENT_SERVICE_TAX)
  private BigDecimal eventServiceTax;

  public static final String SERIALIZED_NAME_EVENT_REMARKS = "event_remarks";
  @SerializedName(SERIALIZED_NAME_EVENT_REMARKS)
  private BigDecimal eventRemarks;

  public SettlementReconEntityDataInnerEventDetails() {
  }

  public SettlementReconEntityDataInnerEventDetails eventId(String eventId) {
    
    this.eventId = eventId;
    return this;
  }

   /**
   * Unique ID associated with the event.
   * @return eventId
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Unique ID associated with the event.")
  public String getEventId() {
    return eventId;
  }


  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public SettlementReconEntityDataInnerEventDetails eventType(String eventType) {
    
    this.eventType = eventType;
    return this;
  }

   /**
   * The event type can be PAYMENT, REFUND, REFUND_REVERSAL, DISPUTE, DISPUTE_REVERSAL, CHARGEBACK, CHARGEBACK_REVERSAL, OTHER_ADJUSTMENT.
   * @return eventType
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The event type can be PAYMENT, REFUND, REFUND_REVERSAL, DISPUTE, DISPUTE_REVERSAL, CHARGEBACK, CHARGEBACK_REVERSAL, OTHER_ADJUSTMENT.")
  public String getEventType() {
    return eventType;
  }


  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public SettlementReconEntityDataInnerEventDetails eventSettlementAmount(BigDecimal eventSettlementAmount) {
    
    this.eventSettlementAmount = eventSettlementAmount;
    return this;
  }

   /**
   * Amount that is part of the settlement corresponding to the event.
   * @return eventSettlementAmount
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Amount that is part of the settlement corresponding to the event.")
  public BigDecimal getEventSettlementAmount() {
    return eventSettlementAmount;
  }


  public void setEventSettlementAmount(BigDecimal eventSettlementAmount) {
    this.eventSettlementAmount = eventSettlementAmount;
  }


  public SettlementReconEntityDataInnerEventDetails eventAmount(BigDecimal eventAmount) {
    
    this.eventAmount = eventAmount;
    return this;
  }

   /**
   * Amount corresponding to the event. Example, refund amount, dispute amount, payment amount, etc.
   * @return eventAmount
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Amount corresponding to the event. Example, refund amount, dispute amount, payment amount, etc.")
  public BigDecimal getEventAmount() {
    return eventAmount;
  }


  public void setEventAmount(BigDecimal eventAmount) {
    this.eventAmount = eventAmount;
  }


  public SettlementReconEntityDataInnerEventDetails saleType(String saleType) {
    
    this.saleType = saleType;
    return this;
  }

   /**
   * Indicates if it is CREDIT/DEBIT sale.
   * @return saleType
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Indicates if it is CREDIT/DEBIT sale.")
  public String getSaleType() {
    return saleType;
  }


  public void setSaleType(String saleType) {
    this.saleType = saleType;
  }


  public SettlementReconEntityDataInnerEventDetails eventStatus(String eventStatus) {
    
    this.eventStatus = eventStatus;
    return this;
  }

   /**
   * Status of the event. Example - SUCCESS, FAILED, PENDING, CANCELLED.
   * @return eventStatus
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Status of the event. Example - SUCCESS, FAILED, PENDING, CANCELLED.")
  public String getEventStatus() {
    return eventStatus;
  }


  public void setEventStatus(String eventStatus) {
    this.eventStatus = eventStatus;
  }


  public SettlementReconEntityDataInnerEventDetails entity(String entity) {
    
    this.entity = entity;
    return this;
  }

   /**
   * Recon
   * @return entity
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Recon")
  public String getEntity() {
    return entity;
  }


  public void setEntity(String entity) {
    this.entity = entity;
  }


  public SettlementReconEntityDataInnerEventDetails eventTime(String eventTime) {
    
    this.eventTime = eventTime;
    return this;
  }

   /**
   * Time associated with the event. Example, transaction time, dispute initiation time
   * @return eventTime
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Time associated with the event. Example, transaction time, dispute initiation time")
  public String getEventTime() {
    return eventTime;
  }


  public void setEventTime(String eventTime) {
    this.eventTime = eventTime;
  }


  public SettlementReconEntityDataInnerEventDetails eventCurrency(String eventCurrency) {
    
    this.eventCurrency = eventCurrency;
    return this;
  }

   /**
   * Curreny type - INR.
   * @return eventCurrency
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Curreny type - INR.")
  public String getEventCurrency() {
    return eventCurrency;
  }


  public void setEventCurrency(String eventCurrency) {
    this.eventCurrency = eventCurrency;
  }


  public SettlementReconEntityDataInnerEventDetails eventServiceCharge(BigDecimal eventServiceCharge) {
    
    this.eventServiceCharge = eventServiceCharge;
    return this;
  }

   /**
   * Service charge for above event_type.
   * @return eventServiceCharge
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Service charge for above event_type.")
  public BigDecimal getEventServiceCharge() {
    return eventServiceCharge;
  }


  public void setEventServiceCharge(BigDecimal eventServiceCharge) {
    this.eventServiceCharge = eventServiceCharge;
  }


  public SettlementReconEntityDataInnerEventDetails eventServiceTax(BigDecimal eventServiceTax) {
    
    this.eventServiceTax = eventServiceTax;
    return this;
  }

   /**
   * Service tax for above event_type.
   * @return eventServiceTax
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Service tax for above event_type.")
  public BigDecimal getEventServiceTax() {
    return eventServiceTax;
  }


  public void setEventServiceTax(BigDecimal eventServiceTax) {
    this.eventServiceTax = eventServiceTax;
  }


  public SettlementReconEntityDataInnerEventDetails eventRemarks(BigDecimal eventRemarks) {
    
    this.eventRemarks = eventRemarks;
    return this;
  }

   /**
   * Remarks for above event_type.
   * @return eventRemarks
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Remarks for above event_type.")
  public BigDecimal getEventRemarks() {
    return eventRemarks;
  }


  public void setEventRemarks(BigDecimal eventRemarks) {
    this.eventRemarks = eventRemarks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettlementReconEntityDataInnerEventDetails settlementReconEntityDataInnerEventDetails = (SettlementReconEntityDataInnerEventDetails) o;
    return Objects.equals(this.eventId, settlementReconEntityDataInnerEventDetails.eventId) &&
        Objects.equals(this.eventType, settlementReconEntityDataInnerEventDetails.eventType) &&
        Objects.equals(this.eventSettlementAmount, settlementReconEntityDataInnerEventDetails.eventSettlementAmount) &&
        Objects.equals(this.eventAmount, settlementReconEntityDataInnerEventDetails.eventAmount) &&
        Objects.equals(this.saleType, settlementReconEntityDataInnerEventDetails.saleType) &&
        Objects.equals(this.eventStatus, settlementReconEntityDataInnerEventDetails.eventStatus) &&
        Objects.equals(this.entity, settlementReconEntityDataInnerEventDetails.entity) &&
        Objects.equals(this.eventTime, settlementReconEntityDataInnerEventDetails.eventTime) &&
        Objects.equals(this.eventCurrency, settlementReconEntityDataInnerEventDetails.eventCurrency) &&
        Objects.equals(this.eventServiceCharge, settlementReconEntityDataInnerEventDetails.eventServiceCharge) &&
        Objects.equals(this.eventServiceTax, settlementReconEntityDataInnerEventDetails.eventServiceTax) &&
        Objects.equals(this.eventRemarks, settlementReconEntityDataInnerEventDetails.eventRemarks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventId, eventType, eventSettlementAmount, eventAmount, saleType, eventStatus, entity, eventTime, eventCurrency, eventServiceCharge, eventServiceTax, eventRemarks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettlementReconEntityDataInnerEventDetails {\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    eventSettlementAmount: ").append(toIndentedString(eventSettlementAmount)).append("\n");
    sb.append("    eventAmount: ").append(toIndentedString(eventAmount)).append("\n");
    sb.append("    saleType: ").append(toIndentedString(saleType)).append("\n");
    sb.append("    eventStatus: ").append(toIndentedString(eventStatus)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    eventTime: ").append(toIndentedString(eventTime)).append("\n");
    sb.append("    eventCurrency: ").append(toIndentedString(eventCurrency)).append("\n");
    sb.append("    eventServiceCharge: ").append(toIndentedString(eventServiceCharge)).append("\n");
    sb.append("    eventServiceTax: ").append(toIndentedString(eventServiceTax)).append("\n");
    sb.append("    eventRemarks: ").append(toIndentedString(eventRemarks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("event_id");
    openapiFields.add("event_type");
    openapiFields.add("event_settlement_amount");
    openapiFields.add("event_amount");
    openapiFields.add("sale_type");
    openapiFields.add("event_status");
    openapiFields.add("entity");
    openapiFields.add("event_time");
    openapiFields.add("event_currency");
    openapiFields.add("event_service_charge");
    openapiFields.add("event_service_tax");
    openapiFields.add("event_remarks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SettlementReconEntityDataInnerEventDetails
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("event_id") != null && !jsonObj.get("event_id").isJsonNull()) && !jsonObj.get("event_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_id").toString()));
      }
      if ((jsonObj.get("event_type") != null && !jsonObj.get("event_type").isJsonNull()) && !jsonObj.get("event_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_type").toString()));
      }
      if ((jsonObj.get("sale_type") != null && !jsonObj.get("sale_type").isJsonNull()) && !jsonObj.get("sale_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sale_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sale_type").toString()));
      }
      if ((jsonObj.get("event_status") != null && !jsonObj.get("event_status").isJsonNull()) && !jsonObj.get("event_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_status").toString()));
      }
      if ((jsonObj.get("entity") != null && !jsonObj.get("entity").isJsonNull()) && !jsonObj.get("entity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entity").toString()));
      }
      if ((jsonObj.get("event_time") != null && !jsonObj.get("event_time").isJsonNull()) && !jsonObj.get("event_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_time").toString()));
      }
      if ((jsonObj.get("event_currency") != null && !jsonObj.get("event_currency").isJsonNull()) && !jsonObj.get("event_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_currency").toString()));
      }
  }


  /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SettlementReconEntityDataInnerEventDetails
  */
  public static boolean validateJsonElementForOneOf(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("event_id") != null && !jsonObj.get("event_id").isJsonNull()) && !jsonObj.get("event_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_id").toString()));
      }
      if ((jsonObj.get("event_type") != null && !jsonObj.get("event_type").isJsonNull()) && !jsonObj.get("event_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_type").toString()));
      }
      if ((jsonObj.get("sale_type") != null && !jsonObj.get("sale_type").isJsonNull()) && !jsonObj.get("sale_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sale_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sale_type").toString()));
      }
      if ((jsonObj.get("event_status") != null && !jsonObj.get("event_status").isJsonNull()) && !jsonObj.get("event_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_status").toString()));
      }
      if ((jsonObj.get("entity") != null && !jsonObj.get("entity").isJsonNull()) && !jsonObj.get("entity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entity").toString()));
      }
      if ((jsonObj.get("event_time") != null && !jsonObj.get("event_time").isJsonNull()) && !jsonObj.get("event_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_time").toString()));
      }
      if ((jsonObj.get("event_currency") != null && !jsonObj.get("event_currency").isJsonNull()) && !jsonObj.get("event_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_currency").toString()));
      }
      return false;
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SettlementReconEntityDataInnerEventDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SettlementReconEntityDataInnerEventDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SettlementReconEntityDataInnerEventDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SettlementReconEntityDataInnerEventDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<SettlementReconEntityDataInnerEventDetails>() {
           @Override
           public void write(JsonWriter out, SettlementReconEntityDataInnerEventDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SettlementReconEntityDataInnerEventDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SettlementReconEntityDataInnerEventDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SettlementReconEntityDataInnerEventDetails
  * @throws IOException if the JSON string is invalid with respect to SettlementReconEntityDataInnerEventDetails
  */
  public static SettlementReconEntityDataInnerEventDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SettlementReconEntityDataInnerEventDetails.class);
  }

 /**
  * Convert an instance of SettlementReconEntityDataInnerEventDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

