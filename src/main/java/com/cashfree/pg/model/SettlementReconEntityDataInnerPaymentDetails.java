/*
 * Cashfree Payment Gateway APIs
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2025-01-01
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cashfree.pg.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.cashfree.pg.JSON;

/**
 * SettlementReconEntityDataInnerPaymentDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-24T11:05:00.475310Z[Etc/UTC]")
public class SettlementReconEntityDataInnerPaymentDetails {
  public static final String SERIALIZED_NAME_PAYMENT_AMOUNT = "payment_amount";
  @SerializedName(SERIALIZED_NAME_PAYMENT_AMOUNT)
  private BigDecimal paymentAmount;

  public static final String SERIALIZED_NAME_PAYMENT_CURRENCY = "payment_currency";
  @SerializedName(SERIALIZED_NAME_PAYMENT_CURRENCY)
  private String paymentCurrency;

  public static final String SERIALIZED_NAME_BANK_REFERENCE = "bank_reference";
  @SerializedName(SERIALIZED_NAME_BANK_REFERENCE)
  private String bankReference;

  public static final String SERIALIZED_NAME_PAYMENT_TIME = "payment_time";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TIME)
  private String paymentTime;

  public static final String SERIALIZED_NAME_PAYMENT_MODE = "payment_mode";
  @SerializedName(SERIALIZED_NAME_PAYMENT_MODE)
  private String paymentMode;

  public static final String SERIALIZED_NAME_PAYMENT_SERVICE_CHARGE = "payment_service_charge";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SERVICE_CHARGE)
  private BigDecimal paymentServiceCharge;

  public static final String SERIALIZED_NAME_PAYMENT_SERVICE_TAX = "payment_service_tax";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SERVICE_TAX)
  private BigDecimal paymentServiceTax;

  public static final String SERIALIZED_NAME_CF_PAYMENT_ID = "cf_payment_id";
  @SerializedName(SERIALIZED_NAME_CF_PAYMENT_ID)
  private String cfPaymentId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_FOREX_CONVERSION_HANDLING_CHARGE = "forex_conversion_handling_charge";
  @SerializedName(SERIALIZED_NAME_FOREX_CONVERSION_HANDLING_CHARGE)
  private String forexConversionHandlingCharge;

  public static final String SERIALIZED_NAME_FOREX_CONVERSION_HANDLING_TAX = "forex_conversion_handling_tax";
  @SerializedName(SERIALIZED_NAME_FOREX_CONVERSION_HANDLING_TAX)
  private String forexConversionHandlingTax;

  public static final String SERIALIZED_NAME_CHARGES_CURRENCY = "charges_currency";
  @SerializedName(SERIALIZED_NAME_CHARGES_CURRENCY)
  private String chargesCurrency;

  public SettlementReconEntityDataInnerPaymentDetails() {
  }

  public SettlementReconEntityDataInnerPaymentDetails paymentAmount(BigDecimal paymentAmount) {
    
    this.paymentAmount = paymentAmount;
    return this;
  }

   /**
   * Payment amount captured.
   * @return paymentAmount
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Payment amount captured.")
  public BigDecimal getPaymentAmount() {
    return paymentAmount;
  }


  public void setPaymentAmount(BigDecimal paymentAmount) {
    this.paymentAmount = paymentAmount;
  }


  public SettlementReconEntityDataInnerPaymentDetails paymentCurrency(String paymentCurrency) {
    
    this.paymentCurrency = paymentCurrency;
    return this;
  }

   /**
   * Payment Curreny type - INR.
   * @return paymentCurrency
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Payment Curreny type - INR.")
  public String getPaymentCurrency() {
    return paymentCurrency;
  }


  public void setPaymentCurrency(String paymentCurrency) {
    this.paymentCurrency = paymentCurrency;
  }


  public SettlementReconEntityDataInnerPaymentDetails bankReference(String bankReference) {
    
    this.bankReference = bankReference;
    return this;
  }

   /**
   * Unique transaction reference number of the payment.
   * @return bankReference
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Unique transaction reference number of the payment.")
  public String getBankReference() {
    return bankReference;
  }


  public void setBankReference(String bankReference) {
    this.bankReference = bankReference;
  }


  public SettlementReconEntityDataInnerPaymentDetails paymentTime(String paymentTime) {
    
    this.paymentTime = paymentTime;
    return this;
  }

   /**
   * Date and time when the payment was initiated.
   * @return paymentTime
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Date and time when the payment was initiated.")
  public String getPaymentTime() {
    return paymentTime;
  }


  public void setPaymentTime(String paymentTime) {
    this.paymentTime = paymentTime;
  }


  public SettlementReconEntityDataInnerPaymentDetails paymentMode(String paymentMode) {
    
    this.paymentMode = paymentMode;
    return this;
  }

   /**
   * Mode of the payment.
   * @return paymentMode
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Mode of the payment.")
  public String getPaymentMode() {
    return paymentMode;
  }


  public void setPaymentMode(String paymentMode) {
    this.paymentMode = paymentMode;
  }


  public SettlementReconEntityDataInnerPaymentDetails paymentServiceCharge(BigDecimal paymentServiceCharge) {
    
    this.paymentServiceCharge = paymentServiceCharge;
    return this;
  }

   /**
   * Service charge applicable for the payment.
   * @return paymentServiceCharge
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Service charge applicable for the payment.")
  public BigDecimal getPaymentServiceCharge() {
    return paymentServiceCharge;
  }


  public void setPaymentServiceCharge(BigDecimal paymentServiceCharge) {
    this.paymentServiceCharge = paymentServiceCharge;
  }


  public SettlementReconEntityDataInnerPaymentDetails paymentServiceTax(BigDecimal paymentServiceTax) {
    
    this.paymentServiceTax = paymentServiceTax;
    return this;
  }

   /**
   * Service tax applicable on the payment.
   * @return paymentServiceTax
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Service tax applicable on the payment.")
  public BigDecimal getPaymentServiceTax() {
    return paymentServiceTax;
  }


  public void setPaymentServiceTax(BigDecimal paymentServiceTax) {
    this.paymentServiceTax = paymentServiceTax;
  }


  public SettlementReconEntityDataInnerPaymentDetails cfPaymentId(String cfPaymentId) {
    
    this.cfPaymentId = cfPaymentId;
    return this;
  }

   /**
   * Cashfree Payments unique ID to identify a payment.
   * @return cfPaymentId
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Cashfree Payments unique ID to identify a payment.")
  public String getCfPaymentId() {
    return cfPaymentId;
  }


  public void setCfPaymentId(String cfPaymentId) {
    this.cfPaymentId = cfPaymentId;
  }


  public SettlementReconEntityDataInnerPaymentDetails status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Status of the Payment.
   * @return status
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Status of the Payment.")
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public SettlementReconEntityDataInnerPaymentDetails forexConversionHandlingCharge(String forexConversionHandlingCharge) {
    
    this.forexConversionHandlingCharge = forexConversionHandlingCharge;
    return this;
  }

   /**
   * Forex Conversion Service Charge.
   * @return forexConversionHandlingCharge
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Forex Conversion Service Charge.")
  public String getForexConversionHandlingCharge() {
    return forexConversionHandlingCharge;
  }


  public void setForexConversionHandlingCharge(String forexConversionHandlingCharge) {
    this.forexConversionHandlingCharge = forexConversionHandlingCharge;
  }


  public SettlementReconEntityDataInnerPaymentDetails forexConversionHandlingTax(String forexConversionHandlingTax) {
    
    this.forexConversionHandlingTax = forexConversionHandlingTax;
    return this;
  }

   /**
   * Forex Conversion Service Tax.
   * @return forexConversionHandlingTax
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Forex Conversion Service Tax.")
  public String getForexConversionHandlingTax() {
    return forexConversionHandlingTax;
  }


  public void setForexConversionHandlingTax(String forexConversionHandlingTax) {
    this.forexConversionHandlingTax = forexConversionHandlingTax;
  }


  public SettlementReconEntityDataInnerPaymentDetails chargesCurrency(String chargesCurrency) {
    
    this.chargesCurrency = chargesCurrency;
    return this;
  }

   /**
   * Forex Charges Curreny type - INR.
   * @return chargesCurrency
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Forex Charges Curreny type - INR.")
  public String getChargesCurrency() {
    return chargesCurrency;
  }


  public void setChargesCurrency(String chargesCurrency) {
    this.chargesCurrency = chargesCurrency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettlementReconEntityDataInnerPaymentDetails settlementReconEntityDataInnerPaymentDetails = (SettlementReconEntityDataInnerPaymentDetails) o;
    return Objects.equals(this.paymentAmount, settlementReconEntityDataInnerPaymentDetails.paymentAmount) &&
        Objects.equals(this.paymentCurrency, settlementReconEntityDataInnerPaymentDetails.paymentCurrency) &&
        Objects.equals(this.bankReference, settlementReconEntityDataInnerPaymentDetails.bankReference) &&
        Objects.equals(this.paymentTime, settlementReconEntityDataInnerPaymentDetails.paymentTime) &&
        Objects.equals(this.paymentMode, settlementReconEntityDataInnerPaymentDetails.paymentMode) &&
        Objects.equals(this.paymentServiceCharge, settlementReconEntityDataInnerPaymentDetails.paymentServiceCharge) &&
        Objects.equals(this.paymentServiceTax, settlementReconEntityDataInnerPaymentDetails.paymentServiceTax) &&
        Objects.equals(this.cfPaymentId, settlementReconEntityDataInnerPaymentDetails.cfPaymentId) &&
        Objects.equals(this.status, settlementReconEntityDataInnerPaymentDetails.status) &&
        Objects.equals(this.forexConversionHandlingCharge, settlementReconEntityDataInnerPaymentDetails.forexConversionHandlingCharge) &&
        Objects.equals(this.forexConversionHandlingTax, settlementReconEntityDataInnerPaymentDetails.forexConversionHandlingTax) &&
        Objects.equals(this.chargesCurrency, settlementReconEntityDataInnerPaymentDetails.chargesCurrency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentAmount, paymentCurrency, bankReference, paymentTime, paymentMode, paymentServiceCharge, paymentServiceTax, cfPaymentId, status, forexConversionHandlingCharge, forexConversionHandlingTax, chargesCurrency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettlementReconEntityDataInnerPaymentDetails {\n");
    sb.append("    paymentAmount: ").append(toIndentedString(paymentAmount)).append("\n");
    sb.append("    paymentCurrency: ").append(toIndentedString(paymentCurrency)).append("\n");
    sb.append("    bankReference: ").append(toIndentedString(bankReference)).append("\n");
    sb.append("    paymentTime: ").append(toIndentedString(paymentTime)).append("\n");
    sb.append("    paymentMode: ").append(toIndentedString(paymentMode)).append("\n");
    sb.append("    paymentServiceCharge: ").append(toIndentedString(paymentServiceCharge)).append("\n");
    sb.append("    paymentServiceTax: ").append(toIndentedString(paymentServiceTax)).append("\n");
    sb.append("    cfPaymentId: ").append(toIndentedString(cfPaymentId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    forexConversionHandlingCharge: ").append(toIndentedString(forexConversionHandlingCharge)).append("\n");
    sb.append("    forexConversionHandlingTax: ").append(toIndentedString(forexConversionHandlingTax)).append("\n");
    sb.append("    chargesCurrency: ").append(toIndentedString(chargesCurrency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payment_amount");
    openapiFields.add("payment_currency");
    openapiFields.add("bank_reference");
    openapiFields.add("payment_time");
    openapiFields.add("payment_mode");
    openapiFields.add("payment_service_charge");
    openapiFields.add("payment_service_tax");
    openapiFields.add("cf_payment_id");
    openapiFields.add("status");
    openapiFields.add("forex_conversion_handling_charge");
    openapiFields.add("forex_conversion_handling_tax");
    openapiFields.add("charges_currency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SettlementReconEntityDataInnerPaymentDetails
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("payment_currency") != null && !jsonObj.get("payment_currency").isJsonNull()) && !jsonObj.get("payment_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_currency").toString()));
      }
      if ((jsonObj.get("bank_reference") != null && !jsonObj.get("bank_reference").isJsonNull()) && !jsonObj.get("bank_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_reference").toString()));
      }
      if ((jsonObj.get("payment_time") != null && !jsonObj.get("payment_time").isJsonNull()) && !jsonObj.get("payment_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_time").toString()));
      }
      if ((jsonObj.get("payment_mode") != null && !jsonObj.get("payment_mode").isJsonNull()) && !jsonObj.get("payment_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_mode").toString()));
      }
      if ((jsonObj.get("cf_payment_id") != null && !jsonObj.get("cf_payment_id").isJsonNull()) && !jsonObj.get("cf_payment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cf_payment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cf_payment_id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("forex_conversion_handling_charge") != null && !jsonObj.get("forex_conversion_handling_charge").isJsonNull()) && !jsonObj.get("forex_conversion_handling_charge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forex_conversion_handling_charge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forex_conversion_handling_charge").toString()));
      }
      if ((jsonObj.get("forex_conversion_handling_tax") != null && !jsonObj.get("forex_conversion_handling_tax").isJsonNull()) && !jsonObj.get("forex_conversion_handling_tax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forex_conversion_handling_tax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forex_conversion_handling_tax").toString()));
      }
      if ((jsonObj.get("charges_currency") != null && !jsonObj.get("charges_currency").isJsonNull()) && !jsonObj.get("charges_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `charges_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("charges_currency").toString()));
      }
  }


  /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SettlementReconEntityDataInnerPaymentDetails
  */
  public static boolean validateJsonElementForOneOf(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("payment_currency") != null && !jsonObj.get("payment_currency").isJsonNull()) && !jsonObj.get("payment_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_currency").toString()));
      }
      if ((jsonObj.get("bank_reference") != null && !jsonObj.get("bank_reference").isJsonNull()) && !jsonObj.get("bank_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_reference").toString()));
      }
      if ((jsonObj.get("payment_time") != null && !jsonObj.get("payment_time").isJsonNull()) && !jsonObj.get("payment_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_time").toString()));
      }
      if ((jsonObj.get("payment_mode") != null && !jsonObj.get("payment_mode").isJsonNull()) && !jsonObj.get("payment_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_mode").toString()));
      }
      if ((jsonObj.get("cf_payment_id") != null && !jsonObj.get("cf_payment_id").isJsonNull()) && !jsonObj.get("cf_payment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cf_payment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cf_payment_id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("forex_conversion_handling_charge") != null && !jsonObj.get("forex_conversion_handling_charge").isJsonNull()) && !jsonObj.get("forex_conversion_handling_charge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forex_conversion_handling_charge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forex_conversion_handling_charge").toString()));
      }
      if ((jsonObj.get("forex_conversion_handling_tax") != null && !jsonObj.get("forex_conversion_handling_tax").isJsonNull()) && !jsonObj.get("forex_conversion_handling_tax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forex_conversion_handling_tax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forex_conversion_handling_tax").toString()));
      }
      if ((jsonObj.get("charges_currency") != null && !jsonObj.get("charges_currency").isJsonNull()) && !jsonObj.get("charges_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `charges_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("charges_currency").toString()));
      }
      return false;
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SettlementReconEntityDataInnerPaymentDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SettlementReconEntityDataInnerPaymentDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SettlementReconEntityDataInnerPaymentDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SettlementReconEntityDataInnerPaymentDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<SettlementReconEntityDataInnerPaymentDetails>() {
           @Override
           public void write(JsonWriter out, SettlementReconEntityDataInnerPaymentDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SettlementReconEntityDataInnerPaymentDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SettlementReconEntityDataInnerPaymentDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SettlementReconEntityDataInnerPaymentDetails
  * @throws IOException if the JSON string is invalid with respect to SettlementReconEntityDataInnerPaymentDetails
  */
  public static SettlementReconEntityDataInnerPaymentDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SettlementReconEntityDataInnerPaymentDetails.class);
  }

 /**
  * Convert an instance of SettlementReconEntityDataInnerPaymentDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

