/*
 * Cashfree Payment Gateway APIs
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2025-01-01
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cashfree.pg.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.cashfree.pg.JSON;

/**
 * SettlementReconEntityDataInnerRefundDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-13T09:56:44.464357Z[Etc/UTC]")
public class SettlementReconEntityDataInnerRefundDetails {
  public static final String SERIALIZED_NAME_REFUND_PROCESSED_AT = "refund_processed_at";
  @SerializedName(SERIALIZED_NAME_REFUND_PROCESSED_AT)
  private String refundProcessedAt;

  public static final String SERIALIZED_NAME_REFUND_ARN = "refund_arn";
  @SerializedName(SERIALIZED_NAME_REFUND_ARN)
  private String refundArn;

  public static final String SERIALIZED_NAME_REFUND_NOTE = "refund_note";
  @SerializedName(SERIALIZED_NAME_REFUND_NOTE)
  private String refundNote;

  public static final String SERIALIZED_NAME_REFUND_ID = "refund_id";
  @SerializedName(SERIALIZED_NAME_REFUND_ID)
  private String refundId;

  public SettlementReconEntityDataInnerRefundDetails() {
  }

  public SettlementReconEntityDataInnerRefundDetails refundProcessedAt(String refundProcessedAt) {
    
    this.refundProcessedAt = refundProcessedAt;
    return this;
  }

   /**
   * Date and time when the refund was processed.
   * @return refundProcessedAt
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Date and time when the refund was processed.")
  public String getRefundProcessedAt() {
    return refundProcessedAt;
  }


  public void setRefundProcessedAt(String refundProcessedAt) {
    this.refundProcessedAt = refundProcessedAt;
  }


  public SettlementReconEntityDataInnerRefundDetails refundArn(String refundArn) {
    
    this.refundArn = refundArn;
    return this;
  }

   /**
   * The bank reference number for refund.
   * @return refundArn
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The bank reference number for refund.")
  public String getRefundArn() {
    return refundArn;
  }


  public void setRefundArn(String refundArn) {
    this.refundArn = refundArn;
  }


  public SettlementReconEntityDataInnerRefundDetails refundNote(String refundNote) {
    
    this.refundNote = refundNote;
    return this;
  }

   /**
   * A refund note for your reference.
   * @return refundNote
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "A refund note for your reference.")
  public String getRefundNote() {
    return refundNote;
  }


  public void setRefundNote(String refundNote) {
    this.refundNote = refundNote;
  }


  public SettlementReconEntityDataInnerRefundDetails refundId(String refundId) {
    
    this.refundId = refundId;
    return this;
  }

   /**
   * An unique ID associated with the refund.
   * @return refundId
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "An unique ID associated with the refund.")
  public String getRefundId() {
    return refundId;
  }


  public void setRefundId(String refundId) {
    this.refundId = refundId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettlementReconEntityDataInnerRefundDetails settlementReconEntityDataInnerRefundDetails = (SettlementReconEntityDataInnerRefundDetails) o;
    return Objects.equals(this.refundProcessedAt, settlementReconEntityDataInnerRefundDetails.refundProcessedAt) &&
        Objects.equals(this.refundArn, settlementReconEntityDataInnerRefundDetails.refundArn) &&
        Objects.equals(this.refundNote, settlementReconEntityDataInnerRefundDetails.refundNote) &&
        Objects.equals(this.refundId, settlementReconEntityDataInnerRefundDetails.refundId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(refundProcessedAt, refundArn, refundNote, refundId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettlementReconEntityDataInnerRefundDetails {\n");
    sb.append("    refundProcessedAt: ").append(toIndentedString(refundProcessedAt)).append("\n");
    sb.append("    refundArn: ").append(toIndentedString(refundArn)).append("\n");
    sb.append("    refundNote: ").append(toIndentedString(refundNote)).append("\n");
    sb.append("    refundId: ").append(toIndentedString(refundId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("refund_processed_at");
    openapiFields.add("refund_arn");
    openapiFields.add("refund_note");
    openapiFields.add("refund_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SettlementReconEntityDataInnerRefundDetails
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("refund_processed_at") != null && !jsonObj.get("refund_processed_at").isJsonNull()) && !jsonObj.get("refund_processed_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refund_processed_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refund_processed_at").toString()));
      }
      if ((jsonObj.get("refund_arn") != null && !jsonObj.get("refund_arn").isJsonNull()) && !jsonObj.get("refund_arn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refund_arn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refund_arn").toString()));
      }
      if ((jsonObj.get("refund_note") != null && !jsonObj.get("refund_note").isJsonNull()) && !jsonObj.get("refund_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refund_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refund_note").toString()));
      }
      if ((jsonObj.get("refund_id") != null && !jsonObj.get("refund_id").isJsonNull()) && !jsonObj.get("refund_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refund_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refund_id").toString()));
      }
  }


  /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SettlementReconEntityDataInnerRefundDetails
  */
  public static boolean validateJsonElementForOneOf(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("refund_processed_at") != null && !jsonObj.get("refund_processed_at").isJsonNull()) && !jsonObj.get("refund_processed_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refund_processed_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refund_processed_at").toString()));
      }
      if ((jsonObj.get("refund_arn") != null && !jsonObj.get("refund_arn").isJsonNull()) && !jsonObj.get("refund_arn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refund_arn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refund_arn").toString()));
      }
      if ((jsonObj.get("refund_note") != null && !jsonObj.get("refund_note").isJsonNull()) && !jsonObj.get("refund_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refund_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refund_note").toString()));
      }
      if ((jsonObj.get("refund_id") != null && !jsonObj.get("refund_id").isJsonNull()) && !jsonObj.get("refund_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refund_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refund_id").toString()));
      }
      return false;
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SettlementReconEntityDataInnerRefundDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SettlementReconEntityDataInnerRefundDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SettlementReconEntityDataInnerRefundDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SettlementReconEntityDataInnerRefundDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<SettlementReconEntityDataInnerRefundDetails>() {
           @Override
           public void write(JsonWriter out, SettlementReconEntityDataInnerRefundDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SettlementReconEntityDataInnerRefundDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SettlementReconEntityDataInnerRefundDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SettlementReconEntityDataInnerRefundDetails
  * @throws IOException if the JSON string is invalid with respect to SettlementReconEntityDataInnerRefundDetails
  */
  public static SettlementReconEntityDataInnerRefundDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SettlementReconEntityDataInnerRefundDetails.class);
  }

 /**
  * Convert an instance of SettlementReconEntityDataInnerRefundDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

