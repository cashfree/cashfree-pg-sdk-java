/*
 * Cashfree Payment Gateway APIs
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2025-01-01
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cashfree.pg.model;

import java.util.Objects;
import com.cashfree.pg.model.OrderMetaPaymentMethodsFiltersFiltersCardBins;
import com.cashfree.pg.model.OrderMetaPaymentMethodsFiltersFiltersCardIssuingBank;
import com.cashfree.pg.model.OrderMetaPaymentMethodsFiltersFiltersCardSchemes;
import com.cashfree.pg.model.OrderMetaPaymentMethodsFiltersFiltersCardSuffix;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.cashfree.pg.JSON;

/**
 * This object takes details of all the filtering that has to be done for this order. Filters on card bins, card schemes, card issuing bank and card suffixes
 */
@Schema(description = "This object takes details of all the filtering that has to be done for this order. Filters on card bins, card schemes, card issuing bank and card suffixes")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-01T11:33:46.250709Z[Etc/UTC]")
public class OrderMetaPaymentMethodsFiltersFilters {
  public static final String SERIALIZED_NAME_CARD_BINS = "card_bins";
  @SerializedName(SERIALIZED_NAME_CARD_BINS)
  private OrderMetaPaymentMethodsFiltersFiltersCardBins cardBins;

  public static final String SERIALIZED_NAME_CARD_SCHEMES = "card_schemes";
  @SerializedName(SERIALIZED_NAME_CARD_SCHEMES)
  private OrderMetaPaymentMethodsFiltersFiltersCardSchemes cardSchemes;

  public static final String SERIALIZED_NAME_CARD_SUFFIX = "card_suffix";
  @SerializedName(SERIALIZED_NAME_CARD_SUFFIX)
  private OrderMetaPaymentMethodsFiltersFiltersCardSuffix cardSuffix;

  public static final String SERIALIZED_NAME_CARD_ISSUING_BANK = "card_issuing_bank";
  @SerializedName(SERIALIZED_NAME_CARD_ISSUING_BANK)
  private OrderMetaPaymentMethodsFiltersFiltersCardIssuingBank cardIssuingBank;

  public OrderMetaPaymentMethodsFiltersFilters() {
  }

  public OrderMetaPaymentMethodsFiltersFilters cardBins(OrderMetaPaymentMethodsFiltersFiltersCardBins cardBins) {
    
    this.cardBins = cardBins;
    return this;
  }

   /**
   * Get cardBins
   * @return cardBins
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public OrderMetaPaymentMethodsFiltersFiltersCardBins getCardBins() {
    return cardBins;
  }


  public void setCardBins(OrderMetaPaymentMethodsFiltersFiltersCardBins cardBins) {
    this.cardBins = cardBins;
  }


  public OrderMetaPaymentMethodsFiltersFilters cardSchemes(OrderMetaPaymentMethodsFiltersFiltersCardSchemes cardSchemes) {
    
    this.cardSchemes = cardSchemes;
    return this;
  }

   /**
   * Get cardSchemes
   * @return cardSchemes
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public OrderMetaPaymentMethodsFiltersFiltersCardSchemes getCardSchemes() {
    return cardSchemes;
  }


  public void setCardSchemes(OrderMetaPaymentMethodsFiltersFiltersCardSchemes cardSchemes) {
    this.cardSchemes = cardSchemes;
  }


  public OrderMetaPaymentMethodsFiltersFilters cardSuffix(OrderMetaPaymentMethodsFiltersFiltersCardSuffix cardSuffix) {
    
    this.cardSuffix = cardSuffix;
    return this;
  }

   /**
   * Get cardSuffix
   * @return cardSuffix
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public OrderMetaPaymentMethodsFiltersFiltersCardSuffix getCardSuffix() {
    return cardSuffix;
  }


  public void setCardSuffix(OrderMetaPaymentMethodsFiltersFiltersCardSuffix cardSuffix) {
    this.cardSuffix = cardSuffix;
  }


  public OrderMetaPaymentMethodsFiltersFilters cardIssuingBank(OrderMetaPaymentMethodsFiltersFiltersCardIssuingBank cardIssuingBank) {
    
    this.cardIssuingBank = cardIssuingBank;
    return this;
  }

   /**
   * Get cardIssuingBank
   * @return cardIssuingBank
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public OrderMetaPaymentMethodsFiltersFiltersCardIssuingBank getCardIssuingBank() {
    return cardIssuingBank;
  }


  public void setCardIssuingBank(OrderMetaPaymentMethodsFiltersFiltersCardIssuingBank cardIssuingBank) {
    this.cardIssuingBank = cardIssuingBank;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderMetaPaymentMethodsFiltersFilters orderMetaPaymentMethodsFiltersFilters = (OrderMetaPaymentMethodsFiltersFilters) o;
    return Objects.equals(this.cardBins, orderMetaPaymentMethodsFiltersFilters.cardBins) &&
        Objects.equals(this.cardSchemes, orderMetaPaymentMethodsFiltersFilters.cardSchemes) &&
        Objects.equals(this.cardSuffix, orderMetaPaymentMethodsFiltersFilters.cardSuffix) &&
        Objects.equals(this.cardIssuingBank, orderMetaPaymentMethodsFiltersFilters.cardIssuingBank);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardBins, cardSchemes, cardSuffix, cardIssuingBank);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderMetaPaymentMethodsFiltersFilters {\n");
    sb.append("    cardBins: ").append(toIndentedString(cardBins)).append("\n");
    sb.append("    cardSchemes: ").append(toIndentedString(cardSchemes)).append("\n");
    sb.append("    cardSuffix: ").append(toIndentedString(cardSuffix)).append("\n");
    sb.append("    cardIssuingBank: ").append(toIndentedString(cardIssuingBank)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("card_bins");
    openapiFields.add("card_schemes");
    openapiFields.add("card_suffix");
    openapiFields.add("card_issuing_bank");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to OrderMetaPaymentMethodsFiltersFilters
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `card_bins`
      if (jsonObj.get("card_bins") != null && !jsonObj.get("card_bins").isJsonNull()) {
        OrderMetaPaymentMethodsFiltersFiltersCardBins.validateJsonElement(jsonObj.get("card_bins"));
      }
      // validate the optional field `card_schemes`
      if (jsonObj.get("card_schemes") != null && !jsonObj.get("card_schemes").isJsonNull()) {
        OrderMetaPaymentMethodsFiltersFiltersCardSchemes.validateJsonElement(jsonObj.get("card_schemes"));
      }
      // validate the optional field `card_suffix`
      if (jsonObj.get("card_suffix") != null && !jsonObj.get("card_suffix").isJsonNull()) {
        OrderMetaPaymentMethodsFiltersFiltersCardSuffix.validateJsonElement(jsonObj.get("card_suffix"));
      }
      // validate the optional field `card_issuing_bank`
      if (jsonObj.get("card_issuing_bank") != null && !jsonObj.get("card_issuing_bank").isJsonNull()) {
        OrderMetaPaymentMethodsFiltersFiltersCardIssuingBank.validateJsonElement(jsonObj.get("card_issuing_bank"));
      }
  }


  /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to OrderMetaPaymentMethodsFiltersFilters
  */
  public static boolean validateJsonElementForOneOf(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `card_bins`
      if (jsonObj.get("card_bins") != null && !jsonObj.get("card_bins").isJsonNull()) {
        OrderMetaPaymentMethodsFiltersFiltersCardBins.validateJsonElement(jsonObj.get("card_bins"));
        return true;
      }
      // validate the optional field `card_schemes`
      if (jsonObj.get("card_schemes") != null && !jsonObj.get("card_schemes").isJsonNull()) {
        OrderMetaPaymentMethodsFiltersFiltersCardSchemes.validateJsonElement(jsonObj.get("card_schemes"));
        return true;
      }
      // validate the optional field `card_suffix`
      if (jsonObj.get("card_suffix") != null && !jsonObj.get("card_suffix").isJsonNull()) {
        OrderMetaPaymentMethodsFiltersFiltersCardSuffix.validateJsonElement(jsonObj.get("card_suffix"));
        return true;
      }
      // validate the optional field `card_issuing_bank`
      if (jsonObj.get("card_issuing_bank") != null && !jsonObj.get("card_issuing_bank").isJsonNull()) {
        OrderMetaPaymentMethodsFiltersFiltersCardIssuingBank.validateJsonElement(jsonObj.get("card_issuing_bank"));
        return true;
      }
      return false;
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderMetaPaymentMethodsFiltersFilters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderMetaPaymentMethodsFiltersFilters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderMetaPaymentMethodsFiltersFilters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderMetaPaymentMethodsFiltersFilters.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderMetaPaymentMethodsFiltersFilters>() {
           @Override
           public void write(JsonWriter out, OrderMetaPaymentMethodsFiltersFilters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderMetaPaymentMethodsFiltersFilters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderMetaPaymentMethodsFiltersFilters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderMetaPaymentMethodsFiltersFilters
  * @throws IOException if the JSON string is invalid with respect to OrderMetaPaymentMethodsFiltersFilters
  */
  public static OrderMetaPaymentMethodsFiltersFilters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderMetaPaymentMethodsFiltersFilters.class);
  }

 /**
  * Convert an instance of OrderMetaPaymentMethodsFiltersFilters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

