/*
 * Cashfree Payment Gateway APIs
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2025-01-01
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cashfree.pg.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.cashfree.pg.JSON;

/**
 * SettlementReconEntityDataInnerDisputeDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-01T11:00:02.685522Z[Etc/UTC]")
public class SettlementReconEntityDataInnerDisputeDetails {
  public static final String SERIALIZED_NAME_CLOSED_IN_FAVOR_OF = "closed_in_favor_of";
  @SerializedName(SERIALIZED_NAME_CLOSED_IN_FAVOR_OF)
  private String closedInFavorOf;

  public static final String SERIALIZED_NAME_DISPUTE_RESOLVED_ON = "dispute_resolved_on";
  @SerializedName(SERIALIZED_NAME_DISPUTE_RESOLVED_ON)
  private String disputeResolvedOn;

  public static final String SERIALIZED_NAME_DISPUTE_CATEGORY = "dispute_category";
  @SerializedName(SERIALIZED_NAME_DISPUTE_CATEGORY)
  private String disputeCategory;

  public static final String SERIALIZED_NAME_DISPUTE_NOTE = "dispute_note";
  @SerializedName(SERIALIZED_NAME_DISPUTE_NOTE)
  private String disputeNote;

  public SettlementReconEntityDataInnerDisputeDetails() {
  }

  public SettlementReconEntityDataInnerDisputeDetails closedInFavorOf(String closedInFavorOf) {
    
    this.closedInFavorOf = closedInFavorOf;
    return this;
  }

   /**
   * Specifies whether the dispute was closed in favor of the merchant or customer. Possible values - Merchant, Customer.
   * @return closedInFavorOf
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Specifies whether the dispute was closed in favor of the merchant or customer. Possible values - Merchant, Customer.")
  public String getClosedInFavorOf() {
    return closedInFavorOf;
  }


  public void setClosedInFavorOf(String closedInFavorOf) {
    this.closedInFavorOf = closedInFavorOf;
  }


  public SettlementReconEntityDataInnerDisputeDetails disputeResolvedOn(String disputeResolvedOn) {
    
    this.disputeResolvedOn = disputeResolvedOn;
    return this;
  }

   /**
   * Date and time when the dispute was resolved.
   * @return disputeResolvedOn
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Date and time when the dispute was resolved.")
  public String getDisputeResolvedOn() {
    return disputeResolvedOn;
  }


  public void setDisputeResolvedOn(String disputeResolvedOn) {
    this.disputeResolvedOn = disputeResolvedOn;
  }


  public SettlementReconEntityDataInnerDisputeDetails disputeCategory(String disputeCategory) {
    
    this.disputeCategory = disputeCategory;
    return this;
  }

   /**
   * Category of the dispute - Dispute code and the reason for dispute is shown.
   * @return disputeCategory
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Category of the dispute - Dispute code and the reason for dispute is shown.")
  public String getDisputeCategory() {
    return disputeCategory;
  }


  public void setDisputeCategory(String disputeCategory) {
    this.disputeCategory = disputeCategory;
  }


  public SettlementReconEntityDataInnerDisputeDetails disputeNote(String disputeNote) {
    
    this.disputeNote = disputeNote;
    return this;
  }

   /**
   * Note regarding the dispute.
   * @return disputeNote
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Note regarding the dispute.")
  public String getDisputeNote() {
    return disputeNote;
  }


  public void setDisputeNote(String disputeNote) {
    this.disputeNote = disputeNote;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettlementReconEntityDataInnerDisputeDetails settlementReconEntityDataInnerDisputeDetails = (SettlementReconEntityDataInnerDisputeDetails) o;
    return Objects.equals(this.closedInFavorOf, settlementReconEntityDataInnerDisputeDetails.closedInFavorOf) &&
        Objects.equals(this.disputeResolvedOn, settlementReconEntityDataInnerDisputeDetails.disputeResolvedOn) &&
        Objects.equals(this.disputeCategory, settlementReconEntityDataInnerDisputeDetails.disputeCategory) &&
        Objects.equals(this.disputeNote, settlementReconEntityDataInnerDisputeDetails.disputeNote);
  }

  @Override
  public int hashCode() {
    return Objects.hash(closedInFavorOf, disputeResolvedOn, disputeCategory, disputeNote);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettlementReconEntityDataInnerDisputeDetails {\n");
    sb.append("    closedInFavorOf: ").append(toIndentedString(closedInFavorOf)).append("\n");
    sb.append("    disputeResolvedOn: ").append(toIndentedString(disputeResolvedOn)).append("\n");
    sb.append("    disputeCategory: ").append(toIndentedString(disputeCategory)).append("\n");
    sb.append("    disputeNote: ").append(toIndentedString(disputeNote)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("closed_in_favor_of");
    openapiFields.add("dispute_resolved_on");
    openapiFields.add("dispute_category");
    openapiFields.add("dispute_note");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SettlementReconEntityDataInnerDisputeDetails
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("closed_in_favor_of") != null && !jsonObj.get("closed_in_favor_of").isJsonNull()) && !jsonObj.get("closed_in_favor_of").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closed_in_favor_of` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closed_in_favor_of").toString()));
      }
      if ((jsonObj.get("dispute_resolved_on") != null && !jsonObj.get("dispute_resolved_on").isJsonNull()) && !jsonObj.get("dispute_resolved_on").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dispute_resolved_on` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dispute_resolved_on").toString()));
      }
      if ((jsonObj.get("dispute_category") != null && !jsonObj.get("dispute_category").isJsonNull()) && !jsonObj.get("dispute_category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dispute_category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dispute_category").toString()));
      }
      if ((jsonObj.get("dispute_note") != null && !jsonObj.get("dispute_note").isJsonNull()) && !jsonObj.get("dispute_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dispute_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dispute_note").toString()));
      }
  }


  /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SettlementReconEntityDataInnerDisputeDetails
  */
  public static boolean validateJsonElementForOneOf(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("closed_in_favor_of") != null && !jsonObj.get("closed_in_favor_of").isJsonNull()) && !jsonObj.get("closed_in_favor_of").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closed_in_favor_of` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closed_in_favor_of").toString()));
      }
      if ((jsonObj.get("dispute_resolved_on") != null && !jsonObj.get("dispute_resolved_on").isJsonNull()) && !jsonObj.get("dispute_resolved_on").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dispute_resolved_on` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dispute_resolved_on").toString()));
      }
      if ((jsonObj.get("dispute_category") != null && !jsonObj.get("dispute_category").isJsonNull()) && !jsonObj.get("dispute_category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dispute_category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dispute_category").toString()));
      }
      if ((jsonObj.get("dispute_note") != null && !jsonObj.get("dispute_note").isJsonNull()) && !jsonObj.get("dispute_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dispute_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dispute_note").toString()));
      }
      return false;
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SettlementReconEntityDataInnerDisputeDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SettlementReconEntityDataInnerDisputeDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SettlementReconEntityDataInnerDisputeDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SettlementReconEntityDataInnerDisputeDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<SettlementReconEntityDataInnerDisputeDetails>() {
           @Override
           public void write(JsonWriter out, SettlementReconEntityDataInnerDisputeDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SettlementReconEntityDataInnerDisputeDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SettlementReconEntityDataInnerDisputeDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SettlementReconEntityDataInnerDisputeDetails
  * @throws IOException if the JSON string is invalid with respect to SettlementReconEntityDataInnerDisputeDetails
  */
  public static SettlementReconEntityDataInnerDisputeDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SettlementReconEntityDataInnerDisputeDetails.class);
  }

 /**
  * Convert an instance of SettlementReconEntityDataInnerDisputeDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

