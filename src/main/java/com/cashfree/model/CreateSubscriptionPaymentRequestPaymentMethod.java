/*
 * Cashfree Payment Gateway APIs
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cashfree.model;

import java.util.Objects;
import com.cashfree.model.CARD;
import com.cashfree.model.ENACH;
import com.cashfree.model.PNACH;
import com.cashfree.model.UPI;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.Arrays;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.cashfree.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-17T09:00:37.237094Z[Etc/UTC]")
public class CreateSubscriptionPaymentRequestPaymentMethod extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(CreateSubscriptionPaymentRequestPaymentMethod.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreateSubscriptionPaymentRequestPaymentMethod.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CreateSubscriptionPaymentRequestPaymentMethod' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<UPI> adapterUPI = gson.getDelegateAdapter(this, TypeToken.get(UPI.class));
            final TypeAdapter<ENACH> adapterENACH = gson.getDelegateAdapter(this, TypeToken.get(ENACH.class));
            final TypeAdapter<PNACH> adapterPNACH = gson.getDelegateAdapter(this, TypeToken.get(PNACH.class));
            final TypeAdapter<CARD> adapterCARD = gson.getDelegateAdapter(this, TypeToken.get(CARD.class));

            return (TypeAdapter<T>) new TypeAdapter<CreateSubscriptionPaymentRequestPaymentMethod>() {
                @Override
                public void write(JsonWriter out, CreateSubscriptionPaymentRequestPaymentMethod value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `UPI`
                    if (value.getActualInstance() instanceof UPI) {
                      JsonElement element = adapterUPI.toJsonTree((UPI)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ENACH`
                    if (value.getActualInstance() instanceof ENACH) {
                      JsonElement element = adapterENACH.toJsonTree((ENACH)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `PNACH`
                    if (value.getActualInstance() instanceof PNACH) {
                      JsonElement element = adapterPNACH.toJsonTree((PNACH)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `CARD`
                    if (value.getActualInstance() instanceof CARD) {
                      JsonElement element = adapterCARD.toJsonTree((CARD)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: CARD, ENACH, PNACH, UPI");
                }

                @Override
                public CreateSubscriptionPaymentRequestPaymentMethod read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize UPI
                    try {
                      // validate the JSON object to see if any exception is thrown
                      if(UPI.validateJsonElementForOneOf(jsonElement)) {
                          actualAdapter = adapterUPI;
                      }
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'UPI'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for UPI failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'UPI'", e);
                    }
                    // deserialize ENACH
                    try {
                      // validate the JSON object to see if any exception is thrown
                      if(ENACH.validateJsonElementForOneOf(jsonElement)) {
                          actualAdapter = adapterENACH;
                      }
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ENACH'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ENACH failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ENACH'", e);
                    }
                    // deserialize PNACH
                    try {
                      // validate the JSON object to see if any exception is thrown
                      if(PNACH.validateJsonElementForOneOf(jsonElement)) {
                          actualAdapter = adapterPNACH;
                      }
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'PNACH'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for PNACH failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'PNACH'", e);
                    }
                    // deserialize CARD
                    try {
                      // validate the JSON object to see if any exception is thrown
                      if(CARD.validateJsonElementForOneOf(jsonElement)) {
                          actualAdapter = adapterCARD;
                      }
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'CARD'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for CARD failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'CARD'", e);
                    }

                    // if (match == 1) {
                        CreateSubscriptionPaymentRequestPaymentMethod ret = new CreateSubscriptionPaymentRequestPaymentMethod();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    // }

                    // throw new IOException(String.format("Failed deserialization for CreateSubscriptionPaymentRequestPaymentMethod: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public CreateSubscriptionPaymentRequestPaymentMethod() {
        super("oneOf", Boolean.FALSE);
    }

    public CreateSubscriptionPaymentRequestPaymentMethod(CARD o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CreateSubscriptionPaymentRequestPaymentMethod(ENACH o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CreateSubscriptionPaymentRequestPaymentMethod(PNACH o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CreateSubscriptionPaymentRequestPaymentMethod(UPI o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("UPI", UPI.class);
        schemas.put("ENACH", ENACH.class);
        schemas.put("PNACH", PNACH.class);
        schemas.put("CARD", CARD.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return CreateSubscriptionPaymentRequestPaymentMethod.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * CARD, ENACH, PNACH, UPI
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof UPI) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ENACH) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PNACH) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CARD) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be CARD, ENACH, PNACH, UPI");
    }

    /**
     * Get the actual instance, which can be the following:
     * CARD, ENACH, PNACH, UPI
     *
     * @return The actual instance (CARD, ENACH, PNACH, UPI)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `UPI`. If the actual instance is not `UPI`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UPI`
     * @throws ClassCastException if the instance is not `UPI`
     */
    public UPI getUPI() throws ClassCastException {
        return (UPI)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ENACH`. If the actual instance is not `ENACH`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ENACH`
     * @throws ClassCastException if the instance is not `ENACH`
     */
    public ENACH getENACH() throws ClassCastException {
        return (ENACH)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PNACH`. If the actual instance is not `PNACH`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PNACH`
     * @throws ClassCastException if the instance is not `PNACH`
     */
    public PNACH getPNACH() throws ClassCastException {
        return (PNACH)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CARD`. If the actual instance is not `CARD`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CARD`
     * @throws ClassCastException if the instance is not `CARD`
     */
    public CARD getCARD() throws ClassCastException {
        return (CARD)super.getActualInstance();
    }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateSubscriptionPaymentRequestPaymentMethod
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with UPI
    try {
      UPI.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for UPI failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ENACH
    try {
      ENACH.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ENACH failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with PNACH
    try {
      PNACH.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for PNACH failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CARD
    try {
      CARD.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CARD failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // if (validCount != 1) {
    //  throw new IOException(String.format("The JSON string is invalid for CreateSubscriptionPaymentRequestPaymentMethod with oneOf schemas: CARD, ENACH, PNACH, UPI. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
    // }
  }

 /**
  * Create an instance of CreateSubscriptionPaymentRequestPaymentMethod given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateSubscriptionPaymentRequestPaymentMethod
  * @throws IOException if the JSON string is invalid with respect to CreateSubscriptionPaymentRequestPaymentMethod
  */
  public static CreateSubscriptionPaymentRequestPaymentMethod fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSubscriptionPaymentRequestPaymentMethod.class);
  }

 /**
  * Convert an instance of CreateSubscriptionPaymentRequestPaymentMethod to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

