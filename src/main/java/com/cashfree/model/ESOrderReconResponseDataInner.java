/*
 * Cashfree Payment Gateway APIs
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cashfree.model;

import java.util.Objects;
import com.cashfree.model.ESOrderReconResponseDataInnerOrderSplitsInner;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.cashfree.JSON;

/**
 * ESOrderReconResponseDataInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-19T11:26:29.184559Z[Etc/UTC]")
public class ESOrderReconResponseDataInner {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_SETTLEMENT_ELIGIBILITY_TIME = "settlement_eligibility_time";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_ELIGIBILITY_TIME)
  private String settlementEligibilityTime;

  public static final String SERIALIZED_NAME_MERCHANT_ORDER_ID = "merchant_order_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ORDER_ID)
  private String merchantOrderId;

  public static final String SERIALIZED_NAME_TX_TIME = "tx_time";
  @SerializedName(SERIALIZED_NAME_TX_TIME)
  private String txTime;

  public static final String SERIALIZED_NAME_SETTLED = "settled";
  @SerializedName(SERIALIZED_NAME_SETTLED)
  private String settled;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entity_id";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private String entityId;

  public static final String SERIALIZED_NAME_MERCHANT_SETTLEMENT_UTR = "merchant_settlement_utr";
  @SerializedName(SERIALIZED_NAME_MERCHANT_SETTLEMENT_UTR)
  private String merchantSettlementUtr;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_SALE_TYPE = "sale_type";
  @SerializedName(SERIALIZED_NAME_SALE_TYPE)
  private String saleType;

  public static final String SERIALIZED_NAME_CUSTOMER_NAME = "customer_name";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_NAME)
  private String customerName;

  public static final String SERIALIZED_NAME_CUSTOMER_EMAIL = "customer_email";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_EMAIL)
  private String customerEmail;

  public static final String SERIALIZED_NAME_CUSTOMER_PHONE = "customer_phone";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_PHONE)
  private String customerPhone;

  public static final String SERIALIZED_NAME_MERCHANT_VENDOR_COMMISSION = "merchant_vendor_commission";
  @SerializedName(SERIALIZED_NAME_MERCHANT_VENDOR_COMMISSION)
  private String merchantVendorCommission;

  public static final String SERIALIZED_NAME_SPLIT_SERVICE_CHARGE = "split_service_charge";
  @SerializedName(SERIALIZED_NAME_SPLIT_SERVICE_CHARGE)
  private String splitServiceCharge;

  public static final String SERIALIZED_NAME_SPLIT_SERVICE_TAX = "split_service_tax";
  @SerializedName(SERIALIZED_NAME_SPLIT_SERVICE_TAX)
  private String splitServiceTax;

  public static final String SERIALIZED_NAME_PG_SERVICE_TAX = "pg_service_tax";
  @SerializedName(SERIALIZED_NAME_PG_SERVICE_TAX)
  private String pgServiceTax;

  public static final String SERIALIZED_NAME_PG_SERVICE_CHARGE = "pg_service_charge";
  @SerializedName(SERIALIZED_NAME_PG_SERVICE_CHARGE)
  private String pgServiceCharge;

  public static final String SERIALIZED_NAME_PG_CHARGE_POSTPAID = "pg_charge_postpaid";
  @SerializedName(SERIALIZED_NAME_PG_CHARGE_POSTPAID)
  private String pgChargePostpaid;

  public static final String SERIALIZED_NAME_MERCHANT_SETTLEMENT_ID = "merchant_settlement_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_SETTLEMENT_ID)
  private String merchantSettlementId;

  public static final String SERIALIZED_NAME_ADDED_ON = "added_on";
  @SerializedName(SERIALIZED_NAME_ADDED_ON)
  private String addedOn;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private String tags;

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entity_type";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private String entityType;

  public static final String SERIALIZED_NAME_SETTLEMENT_INITIATED_ON = "settlement_initiated_on";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_INITIATED_ON)
  private String settlementInitiatedOn;

  public static final String SERIALIZED_NAME_SETTLEMENT_TIME = "settlement_time";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_TIME)
  private String settlementTime;

  public static final String SERIALIZED_NAME_ORDER_SPLITS = "order_splits";
  @SerializedName(SERIALIZED_NAME_ORDER_SPLITS)
  private List<ESOrderReconResponseDataInnerOrderSplitsInner> orderSplits;

  public static final String SERIALIZED_NAME_ELIGIBLE_SPLIT_BALANCE = "eligible_split_balance";
  @SerializedName(SERIALIZED_NAME_ELIGIBLE_SPLIT_BALANCE)
  private String eligibleSplitBalance;

  public ESOrderReconResponseDataInner() {
  }

  public ESOrderReconResponseDataInner amount(BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public BigDecimal getAmount() {
    return amount;
  }


  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public ESOrderReconResponseDataInner settlementEligibilityTime(String settlementEligibilityTime) {
    
    this.settlementEligibilityTime = settlementEligibilityTime;
    return this;
  }

   /**
   * Get settlementEligibilityTime
   * @return settlementEligibilityTime
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public String getSettlementEligibilityTime() {
    return settlementEligibilityTime;
  }


  public void setSettlementEligibilityTime(String settlementEligibilityTime) {
    this.settlementEligibilityTime = settlementEligibilityTime;
  }


  public ESOrderReconResponseDataInner merchantOrderId(String merchantOrderId) {
    
    this.merchantOrderId = merchantOrderId;
    return this;
  }

   /**
   * Get merchantOrderId
   * @return merchantOrderId
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public String getMerchantOrderId() {
    return merchantOrderId;
  }


  public void setMerchantOrderId(String merchantOrderId) {
    this.merchantOrderId = merchantOrderId;
  }


  public ESOrderReconResponseDataInner txTime(String txTime) {
    
    this.txTime = txTime;
    return this;
  }

   /**
   * Get txTime
   * @return txTime
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public String getTxTime() {
    return txTime;
  }


  public void setTxTime(String txTime) {
    this.txTime = txTime;
  }


  public ESOrderReconResponseDataInner settled(String settled) {
    
    this.settled = settled;
    return this;
  }

   /**
   * Get settled
   * @return settled
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public String getSettled() {
    return settled;
  }


  public void setSettled(String settled) {
    this.settled = settled;
  }


  public ESOrderReconResponseDataInner entityId(String entityId) {
    
    this.entityId = entityId;
    return this;
  }

   /**
   * Get entityId
   * @return entityId
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public String getEntityId() {
    return entityId;
  }


  public void setEntityId(String entityId) {
    this.entityId = entityId;
  }


  public ESOrderReconResponseDataInner merchantSettlementUtr(String merchantSettlementUtr) {
    
    this.merchantSettlementUtr = merchantSettlementUtr;
    return this;
  }

   /**
   * Get merchantSettlementUtr
   * @return merchantSettlementUtr
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public String getMerchantSettlementUtr() {
    return merchantSettlementUtr;
  }


  public void setMerchantSettlementUtr(String merchantSettlementUtr) {
    this.merchantSettlementUtr = merchantSettlementUtr;
  }


  public ESOrderReconResponseDataInner currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public ESOrderReconResponseDataInner saleType(String saleType) {
    
    this.saleType = saleType;
    return this;
  }

   /**
   * Get saleType
   * @return saleType
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public String getSaleType() {
    return saleType;
  }


  public void setSaleType(String saleType) {
    this.saleType = saleType;
  }


  public ESOrderReconResponseDataInner customerName(String customerName) {
    
    this.customerName = customerName;
    return this;
  }

   /**
   * Get customerName
   * @return customerName
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public String getCustomerName() {
    return customerName;
  }


  public void setCustomerName(String customerName) {
    this.customerName = customerName;
  }


  public ESOrderReconResponseDataInner customerEmail(String customerEmail) {
    
    this.customerEmail = customerEmail;
    return this;
  }

   /**
   * Get customerEmail
   * @return customerEmail
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public String getCustomerEmail() {
    return customerEmail;
  }


  public void setCustomerEmail(String customerEmail) {
    this.customerEmail = customerEmail;
  }


  public ESOrderReconResponseDataInner customerPhone(String customerPhone) {
    
    this.customerPhone = customerPhone;
    return this;
  }

   /**
   * Get customerPhone
   * @return customerPhone
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public String getCustomerPhone() {
    return customerPhone;
  }


  public void setCustomerPhone(String customerPhone) {
    this.customerPhone = customerPhone;
  }


  public ESOrderReconResponseDataInner merchantVendorCommission(String merchantVendorCommission) {
    
    this.merchantVendorCommission = merchantVendorCommission;
    return this;
  }

   /**
   * Get merchantVendorCommission
   * @return merchantVendorCommission
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public String getMerchantVendorCommission() {
    return merchantVendorCommission;
  }


  public void setMerchantVendorCommission(String merchantVendorCommission) {
    this.merchantVendorCommission = merchantVendorCommission;
  }


  public ESOrderReconResponseDataInner splitServiceCharge(String splitServiceCharge) {
    
    this.splitServiceCharge = splitServiceCharge;
    return this;
  }

   /**
   * Get splitServiceCharge
   * @return splitServiceCharge
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public String getSplitServiceCharge() {
    return splitServiceCharge;
  }


  public void setSplitServiceCharge(String splitServiceCharge) {
    this.splitServiceCharge = splitServiceCharge;
  }


  public ESOrderReconResponseDataInner splitServiceTax(String splitServiceTax) {
    
    this.splitServiceTax = splitServiceTax;
    return this;
  }

   /**
   * Get splitServiceTax
   * @return splitServiceTax
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public String getSplitServiceTax() {
    return splitServiceTax;
  }


  public void setSplitServiceTax(String splitServiceTax) {
    this.splitServiceTax = splitServiceTax;
  }


  public ESOrderReconResponseDataInner pgServiceTax(String pgServiceTax) {
    
    this.pgServiceTax = pgServiceTax;
    return this;
  }

   /**
   * Get pgServiceTax
   * @return pgServiceTax
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public String getPgServiceTax() {
    return pgServiceTax;
  }


  public void setPgServiceTax(String pgServiceTax) {
    this.pgServiceTax = pgServiceTax;
  }


  public ESOrderReconResponseDataInner pgServiceCharge(String pgServiceCharge) {
    
    this.pgServiceCharge = pgServiceCharge;
    return this;
  }

   /**
   * Get pgServiceCharge
   * @return pgServiceCharge
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public String getPgServiceCharge() {
    return pgServiceCharge;
  }


  public void setPgServiceCharge(String pgServiceCharge) {
    this.pgServiceCharge = pgServiceCharge;
  }


  public ESOrderReconResponseDataInner pgChargePostpaid(String pgChargePostpaid) {
    
    this.pgChargePostpaid = pgChargePostpaid;
    return this;
  }

   /**
   * Get pgChargePostpaid
   * @return pgChargePostpaid
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public String getPgChargePostpaid() {
    return pgChargePostpaid;
  }


  public void setPgChargePostpaid(String pgChargePostpaid) {
    this.pgChargePostpaid = pgChargePostpaid;
  }


  public ESOrderReconResponseDataInner merchantSettlementId(String merchantSettlementId) {
    
    this.merchantSettlementId = merchantSettlementId;
    return this;
  }

   /**
   * Get merchantSettlementId
   * @return merchantSettlementId
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public String getMerchantSettlementId() {
    return merchantSettlementId;
  }


  public void setMerchantSettlementId(String merchantSettlementId) {
    this.merchantSettlementId = merchantSettlementId;
  }


  public ESOrderReconResponseDataInner addedOn(String addedOn) {
    
    this.addedOn = addedOn;
    return this;
  }

   /**
   * Get addedOn
   * @return addedOn
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public String getAddedOn() {
    return addedOn;
  }


  public void setAddedOn(String addedOn) {
    this.addedOn = addedOn;
  }


  public ESOrderReconResponseDataInner tags(String tags) {
    
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public String getTags() {
    return tags;
  }


  public void setTags(String tags) {
    this.tags = tags;
  }


  public ESOrderReconResponseDataInner entityType(String entityType) {
    
    this.entityType = entityType;
    return this;
  }

   /**
   * Get entityType
   * @return entityType
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public String getEntityType() {
    return entityType;
  }


  public void setEntityType(String entityType) {
    this.entityType = entityType;
  }


  public ESOrderReconResponseDataInner settlementInitiatedOn(String settlementInitiatedOn) {
    
    this.settlementInitiatedOn = settlementInitiatedOn;
    return this;
  }

   /**
   * Get settlementInitiatedOn
   * @return settlementInitiatedOn
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public String getSettlementInitiatedOn() {
    return settlementInitiatedOn;
  }


  public void setSettlementInitiatedOn(String settlementInitiatedOn) {
    this.settlementInitiatedOn = settlementInitiatedOn;
  }


  public ESOrderReconResponseDataInner settlementTime(String settlementTime) {
    
    this.settlementTime = settlementTime;
    return this;
  }

   /**
   * Get settlementTime
   * @return settlementTime
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public String getSettlementTime() {
    return settlementTime;
  }


  public void setSettlementTime(String settlementTime) {
    this.settlementTime = settlementTime;
  }


  public ESOrderReconResponseDataInner orderSplits(List<ESOrderReconResponseDataInnerOrderSplitsInner> orderSplits) {
    
    this.orderSplits = orderSplits;
    return this;
  }

  public ESOrderReconResponseDataInner addOrderSplitsItem(ESOrderReconResponseDataInnerOrderSplitsInner orderSplitsItem) {
    if (this.orderSplits == null) {
      this.orderSplits = new ArrayList<>();
    }
    this.orderSplits.add(orderSplitsItem);
    return this;
  }

   /**
   * Get orderSplits
   * @return orderSplits
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public List<ESOrderReconResponseDataInnerOrderSplitsInner> getOrderSplits() {
    return orderSplits;
  }


  public void setOrderSplits(List<ESOrderReconResponseDataInnerOrderSplitsInner> orderSplits) {
    this.orderSplits = orderSplits;
  }


  public ESOrderReconResponseDataInner eligibleSplitBalance(String eligibleSplitBalance) {
    
    this.eligibleSplitBalance = eligibleSplitBalance;
    return this;
  }

   /**
   * Get eligibleSplitBalance
   * @return eligibleSplitBalance
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public String getEligibleSplitBalance() {
    return eligibleSplitBalance;
  }


  public void setEligibleSplitBalance(String eligibleSplitBalance) {
    this.eligibleSplitBalance = eligibleSplitBalance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ESOrderReconResponseDataInner esOrderReconResponseDataInner = (ESOrderReconResponseDataInner) o;
    return Objects.equals(this.amount, esOrderReconResponseDataInner.amount) &&
        Objects.equals(this.settlementEligibilityTime, esOrderReconResponseDataInner.settlementEligibilityTime) &&
        Objects.equals(this.merchantOrderId, esOrderReconResponseDataInner.merchantOrderId) &&
        Objects.equals(this.txTime, esOrderReconResponseDataInner.txTime) &&
        Objects.equals(this.settled, esOrderReconResponseDataInner.settled) &&
        Objects.equals(this.entityId, esOrderReconResponseDataInner.entityId) &&
        Objects.equals(this.merchantSettlementUtr, esOrderReconResponseDataInner.merchantSettlementUtr) &&
        Objects.equals(this.currency, esOrderReconResponseDataInner.currency) &&
        Objects.equals(this.saleType, esOrderReconResponseDataInner.saleType) &&
        Objects.equals(this.customerName, esOrderReconResponseDataInner.customerName) &&
        Objects.equals(this.customerEmail, esOrderReconResponseDataInner.customerEmail) &&
        Objects.equals(this.customerPhone, esOrderReconResponseDataInner.customerPhone) &&
        Objects.equals(this.merchantVendorCommission, esOrderReconResponseDataInner.merchantVendorCommission) &&
        Objects.equals(this.splitServiceCharge, esOrderReconResponseDataInner.splitServiceCharge) &&
        Objects.equals(this.splitServiceTax, esOrderReconResponseDataInner.splitServiceTax) &&
        Objects.equals(this.pgServiceTax, esOrderReconResponseDataInner.pgServiceTax) &&
        Objects.equals(this.pgServiceCharge, esOrderReconResponseDataInner.pgServiceCharge) &&
        Objects.equals(this.pgChargePostpaid, esOrderReconResponseDataInner.pgChargePostpaid) &&
        Objects.equals(this.merchantSettlementId, esOrderReconResponseDataInner.merchantSettlementId) &&
        Objects.equals(this.addedOn, esOrderReconResponseDataInner.addedOn) &&
        Objects.equals(this.tags, esOrderReconResponseDataInner.tags) &&
        Objects.equals(this.entityType, esOrderReconResponseDataInner.entityType) &&
        Objects.equals(this.settlementInitiatedOn, esOrderReconResponseDataInner.settlementInitiatedOn) &&
        Objects.equals(this.settlementTime, esOrderReconResponseDataInner.settlementTime) &&
        Objects.equals(this.orderSplits, esOrderReconResponseDataInner.orderSplits) &&
        Objects.equals(this.eligibleSplitBalance, esOrderReconResponseDataInner.eligibleSplitBalance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, settlementEligibilityTime, merchantOrderId, txTime, settled, entityId, merchantSettlementUtr, currency, saleType, customerName, customerEmail, customerPhone, merchantVendorCommission, splitServiceCharge, splitServiceTax, pgServiceTax, pgServiceCharge, pgChargePostpaid, merchantSettlementId, addedOn, tags, entityType, settlementInitiatedOn, settlementTime, orderSplits, eligibleSplitBalance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ESOrderReconResponseDataInner {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    settlementEligibilityTime: ").append(toIndentedString(settlementEligibilityTime)).append("\n");
    sb.append("    merchantOrderId: ").append(toIndentedString(merchantOrderId)).append("\n");
    sb.append("    txTime: ").append(toIndentedString(txTime)).append("\n");
    sb.append("    settled: ").append(toIndentedString(settled)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    merchantSettlementUtr: ").append(toIndentedString(merchantSettlementUtr)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    saleType: ").append(toIndentedString(saleType)).append("\n");
    sb.append("    customerName: ").append(toIndentedString(customerName)).append("\n");
    sb.append("    customerEmail: ").append(toIndentedString(customerEmail)).append("\n");
    sb.append("    customerPhone: ").append(toIndentedString(customerPhone)).append("\n");
    sb.append("    merchantVendorCommission: ").append(toIndentedString(merchantVendorCommission)).append("\n");
    sb.append("    splitServiceCharge: ").append(toIndentedString(splitServiceCharge)).append("\n");
    sb.append("    splitServiceTax: ").append(toIndentedString(splitServiceTax)).append("\n");
    sb.append("    pgServiceTax: ").append(toIndentedString(pgServiceTax)).append("\n");
    sb.append("    pgServiceCharge: ").append(toIndentedString(pgServiceCharge)).append("\n");
    sb.append("    pgChargePostpaid: ").append(toIndentedString(pgChargePostpaid)).append("\n");
    sb.append("    merchantSettlementId: ").append(toIndentedString(merchantSettlementId)).append("\n");
    sb.append("    addedOn: ").append(toIndentedString(addedOn)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    settlementInitiatedOn: ").append(toIndentedString(settlementInitiatedOn)).append("\n");
    sb.append("    settlementTime: ").append(toIndentedString(settlementTime)).append("\n");
    sb.append("    orderSplits: ").append(toIndentedString(orderSplits)).append("\n");
    sb.append("    eligibleSplitBalance: ").append(toIndentedString(eligibleSplitBalance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("settlement_eligibility_time");
    openapiFields.add("merchant_order_id");
    openapiFields.add("tx_time");
    openapiFields.add("settled");
    openapiFields.add("entity_id");
    openapiFields.add("merchant_settlement_utr");
    openapiFields.add("currency");
    openapiFields.add("sale_type");
    openapiFields.add("customer_name");
    openapiFields.add("customer_email");
    openapiFields.add("customer_phone");
    openapiFields.add("merchant_vendor_commission");
    openapiFields.add("split_service_charge");
    openapiFields.add("split_service_tax");
    openapiFields.add("pg_service_tax");
    openapiFields.add("pg_service_charge");
    openapiFields.add("pg_charge_postpaid");
    openapiFields.add("merchant_settlement_id");
    openapiFields.add("added_on");
    openapiFields.add("tags");
    openapiFields.add("entity_type");
    openapiFields.add("settlement_initiated_on");
    openapiFields.add("settlement_time");
    openapiFields.add("order_splits");
    openapiFields.add("eligible_split_balance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ESOrderReconResponseDataInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("settlement_eligibility_time") != null && !jsonObj.get("settlement_eligibility_time").isJsonNull()) && !jsonObj.get("settlement_eligibility_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlement_eligibility_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlement_eligibility_time").toString()));
      }
      if ((jsonObj.get("merchant_order_id") != null && !jsonObj.get("merchant_order_id").isJsonNull()) && !jsonObj.get("merchant_order_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_order_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_order_id").toString()));
      }
      if ((jsonObj.get("tx_time") != null && !jsonObj.get("tx_time").isJsonNull()) && !jsonObj.get("tx_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tx_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tx_time").toString()));
      }
      if ((jsonObj.get("settled") != null && !jsonObj.get("settled").isJsonNull()) && !jsonObj.get("settled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settled").toString()));
      }
      if ((jsonObj.get("entity_id") != null && !jsonObj.get("entity_id").isJsonNull()) && !jsonObj.get("entity_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entity_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entity_id").toString()));
      }
      if ((jsonObj.get("merchant_settlement_utr") != null && !jsonObj.get("merchant_settlement_utr").isJsonNull()) && !jsonObj.get("merchant_settlement_utr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_settlement_utr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_settlement_utr").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("sale_type") != null && !jsonObj.get("sale_type").isJsonNull()) && !jsonObj.get("sale_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sale_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sale_type").toString()));
      }
      if ((jsonObj.get("customer_name") != null && !jsonObj.get("customer_name").isJsonNull()) && !jsonObj.get("customer_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_name").toString()));
      }
      if ((jsonObj.get("customer_email") != null && !jsonObj.get("customer_email").isJsonNull()) && !jsonObj.get("customer_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_email").toString()));
      }
      if ((jsonObj.get("customer_phone") != null && !jsonObj.get("customer_phone").isJsonNull()) && !jsonObj.get("customer_phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_phone").toString()));
      }
      if ((jsonObj.get("merchant_vendor_commission") != null && !jsonObj.get("merchant_vendor_commission").isJsonNull()) && !jsonObj.get("merchant_vendor_commission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_vendor_commission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_vendor_commission").toString()));
      }
      if ((jsonObj.get("split_service_charge") != null && !jsonObj.get("split_service_charge").isJsonNull()) && !jsonObj.get("split_service_charge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `split_service_charge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("split_service_charge").toString()));
      }
      if ((jsonObj.get("split_service_tax") != null && !jsonObj.get("split_service_tax").isJsonNull()) && !jsonObj.get("split_service_tax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `split_service_tax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("split_service_tax").toString()));
      }
      if ((jsonObj.get("pg_service_tax") != null && !jsonObj.get("pg_service_tax").isJsonNull()) && !jsonObj.get("pg_service_tax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pg_service_tax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pg_service_tax").toString()));
      }
      if ((jsonObj.get("pg_service_charge") != null && !jsonObj.get("pg_service_charge").isJsonNull()) && !jsonObj.get("pg_service_charge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pg_service_charge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pg_service_charge").toString()));
      }
      if ((jsonObj.get("pg_charge_postpaid") != null && !jsonObj.get("pg_charge_postpaid").isJsonNull()) && !jsonObj.get("pg_charge_postpaid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pg_charge_postpaid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pg_charge_postpaid").toString()));
      }
      if ((jsonObj.get("merchant_settlement_id") != null && !jsonObj.get("merchant_settlement_id").isJsonNull()) && !jsonObj.get("merchant_settlement_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_settlement_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_settlement_id").toString()));
      }
      if ((jsonObj.get("added_on") != null && !jsonObj.get("added_on").isJsonNull()) && !jsonObj.get("added_on").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `added_on` to be a primitive type in the JSON string but got `%s`", jsonObj.get("added_on").toString()));
      }
      if ((jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) && !jsonObj.get("tags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("entity_type") != null && !jsonObj.get("entity_type").isJsonNull()) && !jsonObj.get("entity_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entity_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entity_type").toString()));
      }
      if ((jsonObj.get("settlement_initiated_on") != null && !jsonObj.get("settlement_initiated_on").isJsonNull()) && !jsonObj.get("settlement_initiated_on").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlement_initiated_on` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlement_initiated_on").toString()));
      }
      if ((jsonObj.get("settlement_time") != null && !jsonObj.get("settlement_time").isJsonNull()) && !jsonObj.get("settlement_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlement_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlement_time").toString()));
      }
      if (jsonObj.get("order_splits") != null && !jsonObj.get("order_splits").isJsonNull()) {
        JsonArray jsonArrayorderSplits = jsonObj.getAsJsonArray("order_splits");
        if (jsonArrayorderSplits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("order_splits").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `order_splits` to be an array in the JSON string but got `%s`", jsonObj.get("order_splits").toString()));
          }

          // validate the optional field `order_splits` (array)
          for (int i = 0; i < jsonArrayorderSplits.size(); i++) {
            ESOrderReconResponseDataInnerOrderSplitsInner.validateJsonElement(jsonArrayorderSplits.get(i));
          };
        }
      }
      if ((jsonObj.get("eligible_split_balance") != null && !jsonObj.get("eligible_split_balance").isJsonNull()) && !jsonObj.get("eligible_split_balance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eligible_split_balance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eligible_split_balance").toString()));
      }
  }


  /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ESOrderReconResponseDataInner
  */
  public static boolean validateJsonElementForOneOf(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("settlement_eligibility_time") != null && !jsonObj.get("settlement_eligibility_time").isJsonNull()) && !jsonObj.get("settlement_eligibility_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlement_eligibility_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlement_eligibility_time").toString()));
      }
      if ((jsonObj.get("merchant_order_id") != null && !jsonObj.get("merchant_order_id").isJsonNull()) && !jsonObj.get("merchant_order_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_order_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_order_id").toString()));
      }
      if ((jsonObj.get("tx_time") != null && !jsonObj.get("tx_time").isJsonNull()) && !jsonObj.get("tx_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tx_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tx_time").toString()));
      }
      if ((jsonObj.get("settled") != null && !jsonObj.get("settled").isJsonNull()) && !jsonObj.get("settled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settled").toString()));
      }
      if ((jsonObj.get("entity_id") != null && !jsonObj.get("entity_id").isJsonNull()) && !jsonObj.get("entity_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entity_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entity_id").toString()));
      }
      if ((jsonObj.get("merchant_settlement_utr") != null && !jsonObj.get("merchant_settlement_utr").isJsonNull()) && !jsonObj.get("merchant_settlement_utr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_settlement_utr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_settlement_utr").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("sale_type") != null && !jsonObj.get("sale_type").isJsonNull()) && !jsonObj.get("sale_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sale_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sale_type").toString()));
      }
      if ((jsonObj.get("customer_name") != null && !jsonObj.get("customer_name").isJsonNull()) && !jsonObj.get("customer_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_name").toString()));
      }
      if ((jsonObj.get("customer_email") != null && !jsonObj.get("customer_email").isJsonNull()) && !jsonObj.get("customer_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_email").toString()));
      }
      if ((jsonObj.get("customer_phone") != null && !jsonObj.get("customer_phone").isJsonNull()) && !jsonObj.get("customer_phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_phone").toString()));
      }
      if ((jsonObj.get("merchant_vendor_commission") != null && !jsonObj.get("merchant_vendor_commission").isJsonNull()) && !jsonObj.get("merchant_vendor_commission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_vendor_commission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_vendor_commission").toString()));
      }
      if ((jsonObj.get("split_service_charge") != null && !jsonObj.get("split_service_charge").isJsonNull()) && !jsonObj.get("split_service_charge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `split_service_charge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("split_service_charge").toString()));
      }
      if ((jsonObj.get("split_service_tax") != null && !jsonObj.get("split_service_tax").isJsonNull()) && !jsonObj.get("split_service_tax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `split_service_tax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("split_service_tax").toString()));
      }
      if ((jsonObj.get("pg_service_tax") != null && !jsonObj.get("pg_service_tax").isJsonNull()) && !jsonObj.get("pg_service_tax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pg_service_tax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pg_service_tax").toString()));
      }
      if ((jsonObj.get("pg_service_charge") != null && !jsonObj.get("pg_service_charge").isJsonNull()) && !jsonObj.get("pg_service_charge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pg_service_charge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pg_service_charge").toString()));
      }
      if ((jsonObj.get("pg_charge_postpaid") != null && !jsonObj.get("pg_charge_postpaid").isJsonNull()) && !jsonObj.get("pg_charge_postpaid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pg_charge_postpaid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pg_charge_postpaid").toString()));
      }
      if ((jsonObj.get("merchant_settlement_id") != null && !jsonObj.get("merchant_settlement_id").isJsonNull()) && !jsonObj.get("merchant_settlement_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_settlement_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_settlement_id").toString()));
      }
      if ((jsonObj.get("added_on") != null && !jsonObj.get("added_on").isJsonNull()) && !jsonObj.get("added_on").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `added_on` to be a primitive type in the JSON string but got `%s`", jsonObj.get("added_on").toString()));
      }
      if ((jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) && !jsonObj.get("tags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("entity_type") != null && !jsonObj.get("entity_type").isJsonNull()) && !jsonObj.get("entity_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entity_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entity_type").toString()));
      }
      if ((jsonObj.get("settlement_initiated_on") != null && !jsonObj.get("settlement_initiated_on").isJsonNull()) && !jsonObj.get("settlement_initiated_on").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlement_initiated_on` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlement_initiated_on").toString()));
      }
      if ((jsonObj.get("settlement_time") != null && !jsonObj.get("settlement_time").isJsonNull()) && !jsonObj.get("settlement_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlement_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlement_time").toString()));
      }
      if (jsonObj.get("order_splits") != null && !jsonObj.get("order_splits").isJsonNull()) {
        JsonArray jsonArrayorderSplits = jsonObj.getAsJsonArray("order_splits");
        if (jsonArrayorderSplits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("order_splits").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `order_splits` to be an array in the JSON string but got `%s`", jsonObj.get("order_splits").toString()));
          }

          // validate the optional field `order_splits` (array)
          for (int i = 0; i < jsonArrayorderSplits.size(); i++) {
            ESOrderReconResponseDataInnerOrderSplitsInner.validateJsonElement(jsonArrayorderSplits.get(i));
          };
        }
      }
      if ((jsonObj.get("eligible_split_balance") != null && !jsonObj.get("eligible_split_balance").isJsonNull()) && !jsonObj.get("eligible_split_balance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eligible_split_balance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eligible_split_balance").toString()));
      }
      return false;
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ESOrderReconResponseDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ESOrderReconResponseDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ESOrderReconResponseDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ESOrderReconResponseDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ESOrderReconResponseDataInner>() {
           @Override
           public void write(JsonWriter out, ESOrderReconResponseDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ESOrderReconResponseDataInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ESOrderReconResponseDataInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ESOrderReconResponseDataInner
  * @throws IOException if the JSON string is invalid with respect to ESOrderReconResponseDataInner
  */
  public static ESOrderReconResponseDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ESOrderReconResponseDataInner.class);
  }

 /**
  * Convert an instance of ESOrderReconResponseDataInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

