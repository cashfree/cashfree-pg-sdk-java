/*
 * Cashfree Payment Gateway APIs
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cashfree;

import com.cashfree.model.*;
import com.google.gson.reflect.TypeToken;

import okhttp3.*;
import okhttp3.internal.http.HttpMethod;
import okhttp3.internal.tls.OkHostnameVerifier;
import okhttp3.logging.HttpLoggingInterceptor;
import okhttp3.logging.HttpLoggingInterceptor.Level;
import okio.Buffer;
import okio.BufferedSink;
import okio.Okio;

import java.math.BigDecimal;
import javax.net.ssl.*;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Type;
import java.net.URI;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.GeneralSecurityException;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.text.DateFormat;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.Map.Entry;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;
import com.google.gson.Gson;

import com.cashfree.auth.Authentication;
import com.cashfree.auth.HttpBasicAuth;
import com.cashfree.auth.HttpBearerAuth;
import com.cashfree.auth.ApiKeyAuth;


public class Cashfree {

    enum CFEnvironment {
        SANDBOX,
        PRODUCTION;
    }

  public static String XClientId = "";
  public static String XClientSecret = "";
  public static String XPartnerAPIKey = "";
  public static String XPartnerMerchantID = "";
  public static String XClientSignature = "";
  public static String XApiVersion = "2023-08-01";
  public static CFEnvironment XEnvironment = CFEnvironment.SANDBOX;

  public static CFEnvironment SANDBOX = CFEnvironment.SANDBOX;
  public static CFEnvironment PRODUCTION = CFEnvironment.PRODUCTION;

  private ApiClient localVarApiClient = new ApiClient();

  public PGWebhookEvent PGVerifyWebhookSignature(String signature, String rawBody, String timestamp) throws Exception {
        try {
            String data = timestamp + rawBody;
            String secretKey = Cashfree.XClientSecret;
            Mac sha256_HMAC = Mac.getInstance("HmacSHA256");
            SecretKeySpec secret_key_spec = new SecretKeySpec(secretKey.getBytes(), "HmacSHA256");
            sha256_HMAC.init(secret_key_spec);
            String computed_signature = Base64.getEncoder().encodeToString(sha256_HMAC.doFinal(data.getBytes()));
            if(computed_signature.equals(signature)) {
                Gson g = new Gson();
                PGWebhookEvent response = g.fromJson(rawBody, PGWebhookEvent.class);
                return response;
            }
            throw new Exception("Generated signature and received signature did not match.");
        } catch (Exception e) {
            throw e;
        }
    }


    /**
     * Build call for pGCreateCustomer
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param createCustomerRequest Request to create a new customer at Cashfree (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGCreateCustomerCall(String xApiVersion, CreateCustomerRequest createCustomerRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = createCustomerRequest;

        // create path and map variables
        String localVarPath = "/customers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGCreateCustomerValidateBeforeCall(String xApiVersion, CreateCustomerRequest createCustomerRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGCreateCustomer(Async)");
        }

        // verify the required parameter 'createCustomerRequest' is set
        if (createCustomerRequest == null) {
            throw new ApiException("Missing the required parameter 'createCustomerRequest' when calling PGCreateCustomer(Async)");
        }

        return pGCreateCustomerCall(xApiVersion, createCustomerRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<CustomerEntity> PGCreateCustomer(String xApiVersion, CreateCustomerRequest createCustomerRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGCreateCustomerValidateBeforeCall(xApiVersion, createCustomerRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<CustomerEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for terminalCreateQRCodes
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param createPartnerVpaRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid Partner API Key </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call terminalCreateQRCodesCall(String xApiVersion, String xRequestId, UUID xIdempotencyKey, CreatePartnerVpaRequest createPartnerVpaRequest, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = createPartnerVpaRequest;

        // create path and map variables
        String localVarPath = "/partners/merchant/qrcodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call terminalCreateQRCodesValidateBeforeCall(String xApiVersion, String xRequestId, UUID xIdempotencyKey, CreatePartnerVpaRequest createPartnerVpaRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling TerminalCreateQRCodes(Async)");
        }

        return terminalCreateQRCodesCall(xApiVersion, xRequestId, xIdempotencyKey, createPartnerVpaRequest, _callback);

    }

    public ApiResponse<List<StaticQrResponseEntity>> TerminalCreateQRCodes(String xApiVersion, String xRequestId, UUID xIdempotencyKey, CreatePartnerVpaRequest createPartnerVpaRequest, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = terminalCreateQRCodesValidateBeforeCall(xApiVersion, xRequestId, xIdempotencyKey, createPartnerVpaRequest, null);
        Type localVarReturnType = new TypeToken<List<StaticQrResponseEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for terminalGetQRCodes
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param status Status of pre-created Qr. (required)
     * @param cfTerminalId Cashfree terminal id for which you want to get pre-generated staticQRs. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid Partner API Key </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call terminalGetQRCodesCall(String xApiVersion, String status, String cfTerminalId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/partners/merchant/qrcodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (cfTerminalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cf_terminal_id", cfTerminalId));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call terminalGetQRCodesValidateBeforeCall(String xApiVersion, String status, String cfTerminalId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling TerminalGetQRCodes(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling TerminalGetQRCodes(Async)");
        }

        // verify the required parameter 'cfTerminalId' is set
        if (cfTerminalId == null) {
            throw new ApiException("Missing the required parameter 'cfTerminalId' when calling TerminalGetQRCodes(Async)");
        }

        return terminalGetQRCodesCall(xApiVersion, status, cfTerminalId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<List<StaticQrResponseEntity>> TerminalGetQRCodes(String xApiVersion, String status, String cfTerminalId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = terminalGetQRCodesValidateBeforeCall(xApiVersion, status, cfTerminalId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<List<StaticQrResponseEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGAcceptDisputeByID
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param disputeId  (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGAcceptDisputeByIDCall(String xApiVersion, Integer disputeId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/disputes/{dispute_id}/accept"
            .replace("{" + "dispute_id" + "}", localVarApiClient.escapeString(disputeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGAcceptDisputeByIDValidateBeforeCall(String xApiVersion, Integer disputeId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGAcceptDisputeByID(Async)");
        }

        // verify the required parameter 'disputeId' is set
        if (disputeId == null) {
            throw new ApiException("Missing the required parameter 'disputeId' when calling PGAcceptDisputeByID(Async)");
        }

        return pGAcceptDisputeByIDCall(xApiVersion, disputeId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<DisputesEntityMerchantAccepted> PGAcceptDisputeByID(String xApiVersion, Integer disputeId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGAcceptDisputeByIDValidateBeforeCall(xApiVersion, disputeId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<DisputesEntityMerchantAccepted>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGFetchDisputeByID
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param disputeId  (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGFetchDisputeByIDCall(String xApiVersion, Integer disputeId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/disputes/{dispute_id}"
            .replace("{" + "dispute_id" + "}", localVarApiClient.escapeString(disputeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGFetchDisputeByIDValidateBeforeCall(String xApiVersion, Integer disputeId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGFetchDisputeByID(Async)");
        }

        // verify the required parameter 'disputeId' is set
        if (disputeId == null) {
            throw new ApiException("Missing the required parameter 'disputeId' when calling PGFetchDisputeByID(Async)");
        }

        return pGFetchDisputeByIDCall(xApiVersion, disputeId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<DisputesEntity> PGFetchDisputeByID(String xApiVersion, Integer disputeId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGFetchDisputeByIDValidateBeforeCall(xApiVersion, disputeId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<DisputesEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGFetchOrderDisputes
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param orderId  (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGFetchOrderDisputesCall(String xApiVersion, String orderId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{order_id}/disputes"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGFetchOrderDisputesValidateBeforeCall(String xApiVersion, String orderId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGFetchOrderDisputes(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling PGFetchOrderDisputes(Async)");
        }

        return pGFetchOrderDisputesCall(xApiVersion, orderId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<List<DisputesEntity>> PGFetchOrderDisputes(String xApiVersion, String orderId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGFetchOrderDisputesValidateBeforeCall(xApiVersion, orderId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<List<DisputesEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGFetchPaymentDisputes
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param cfPaymentId  (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGFetchPaymentDisputesCall(String xApiVersion, Integer cfPaymentId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments/{cf_payment_id}/disputes"
            .replace("{" + "cf_payment_id" + "}", localVarApiClient.escapeString(cfPaymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGFetchPaymentDisputesValidateBeforeCall(String xApiVersion, Integer cfPaymentId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGFetchPaymentDisputes(Async)");
        }

        // verify the required parameter 'cfPaymentId' is set
        if (cfPaymentId == null) {
            throw new ApiException("Missing the required parameter 'cfPaymentId' when calling PGFetchPaymentDisputes(Async)");
        }

        return pGFetchPaymentDisputesCall(xApiVersion, cfPaymentId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<List<DisputesEntity>> PGFetchPaymentDisputes(String xApiVersion, Integer cfPaymentId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGFetchPaymentDisputesValidateBeforeCall(xApiVersion, cfPaymentId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<List<DisputesEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGUploadDisputesDocuments
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param disputeId  (required)
     * @param _file File types supported are jpeg, jpg, png, pdf and maximum file size allowed is 20 MB. (required)
     * @param docType Mention the type of the document you are uploading. Possible values :- Delivery/Service Proof, Shipping Proof, Statement of Service, Proof of Service Used, Cancellation of Service Proof, Refund Proof, Business model explanation, Extra Charges Declaration, Terms &amp; Conditions, Customer Withdrawal Letter, Certificate of Authenticity, Reseller Agreement. You can use get evidences to contest dispute API to fetch set of documents required to contest particular dispute. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param note  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGUploadDisputesDocumentsCall(String xApiVersion, Integer disputeId, String _file, String docType, String xRequestId, UUID xIdempotencyKey, String note, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/disputes/{dispute_id}/documents"
            .replace("{" + "dispute_id" + "}", localVarApiClient.escapeString(disputeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (docType != null) {
            localVarFormParams.put("doc_type", docType);
        }

        if (note != null) {
            localVarFormParams.put("note", note);
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGUploadDisputesDocumentsValidateBeforeCall(String xApiVersion, Integer disputeId, String _file, String docType, String xRequestId, UUID xIdempotencyKey, String note, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGUploadDisputesDocuments(Async)");
        }

        // verify the required parameter 'disputeId' is set
        if (disputeId == null) {
            throw new ApiException("Missing the required parameter 'disputeId' when calling PGUploadDisputesDocuments(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling PGUploadDisputesDocuments(Async)");
        }

        // verify the required parameter 'docType' is set
        if (docType == null) {
            throw new ApiException("Missing the required parameter 'docType' when calling PGUploadDisputesDocuments(Async)");
        }

        return pGUploadDisputesDocumentsCall(xApiVersion, disputeId, _file, docType, xRequestId, xIdempotencyKey, note, _callback);

    }

    public ApiResponse<List<DisputesEntity>> PGUploadDisputesDocuments(String xApiVersion, Integer disputeId, String _file, String docType, String xRequestId, UUID xIdempotencyKey, String note, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGUploadDisputesDocumentsValidateBeforeCall(xApiVersion, disputeId, _file, docType, xRequestId, xIdempotencyKey, note, null);
        Type localVarReturnType = new TypeToken<List<DisputesEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGESCreateAdjustment
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param vendorId The id which uniquely identifies your vendor. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param vendorAdjustmentRequest Vendor Adjustment Request Body. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vendor Adjustment Success Response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Adjust Vendor Balance Failure Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pGESCreateAdjustmentCall(String xApiVersion, String vendorId, String xRequestId, UUID xIdempotencyKey, VendorAdjustmentRequest vendorAdjustmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = vendorAdjustmentRequest;

        // create path and map variables
        String localVarPath = "/easy-split/vendors/{vendor_id}/adjustment"
            .replace("{" + "vendor_id" + "}", localVarApiClient.escapeString(vendorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGESCreateAdjustmentValidateBeforeCall(String xApiVersion, String vendorId, String xRequestId, UUID xIdempotencyKey, VendorAdjustmentRequest vendorAdjustmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGESCreateAdjustment(Async)");
        }

        // verify the required parameter 'vendorId' is set
        if (vendorId == null) {
            throw new ApiException("Missing the required parameter 'vendorId' when calling PGESCreateAdjustment(Async)");
        }

        return pGESCreateAdjustmentCall(xApiVersion, vendorId, xRequestId, xIdempotencyKey, vendorAdjustmentRequest, _callback);

    }

    public ApiResponse<VendorAdjustmentSuccessResponse> PGESCreateAdjustment(String xApiVersion, String vendorId, String xRequestId, UUID xIdempotencyKey, VendorAdjustmentRequest vendorAdjustmentRequest, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGESCreateAdjustmentValidateBeforeCall(xApiVersion, vendorId, xRequestId, xIdempotencyKey, vendorAdjustmentRequest, null);
        Type localVarReturnType = new TypeToken<VendorAdjustmentSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGESCreateOnDemandTransfer
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param vendorId The id which uniquely identifies your vendor. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param adjustVendorBalanceRequest Adjust Vendor Balance Request Body. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Adjust Vendor Balance Success Response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Adjust Vendor Balance Failure Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pGESCreateOnDemandTransferCall(String xApiVersion, String vendorId, String xRequestId, UUID xIdempotencyKey, AdjustVendorBalanceRequest adjustVendorBalanceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = adjustVendorBalanceRequest;

        // create path and map variables
        String localVarPath = "/easy-split/vendors/{vendor_id}/transfer"
            .replace("{" + "vendor_id" + "}", localVarApiClient.escapeString(vendorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGESCreateOnDemandTransferValidateBeforeCall(String xApiVersion, String vendorId, String xRequestId, UUID xIdempotencyKey, AdjustVendorBalanceRequest adjustVendorBalanceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGESCreateOnDemandTransfer(Async)");
        }

        // verify the required parameter 'vendorId' is set
        if (vendorId == null) {
            throw new ApiException("Missing the required parameter 'vendorId' when calling PGESCreateOnDemandTransfer(Async)");
        }

        return pGESCreateOnDemandTransferCall(xApiVersion, vendorId, xRequestId, xIdempotencyKey, adjustVendorBalanceRequest, _callback);

    }

    public ApiResponse<AdjustVendorBalanceResponse> PGESCreateOnDemandTransfer(String xApiVersion, String vendorId, String xRequestId, UUID xIdempotencyKey, AdjustVendorBalanceRequest adjustVendorBalanceRequest, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGESCreateOnDemandTransferValidateBeforeCall(xApiVersion, vendorId, xRequestId, xIdempotencyKey, adjustVendorBalanceRequest, null);
        Type localVarReturnType = new TypeToken<AdjustVendorBalanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGESCreateVendors
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param createVendorRequest Create Vendor Request Body. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Vendor Success Response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Create Vendor Failure Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pGESCreateVendorsCall(String xApiVersion, String xRequestId, UUID xIdempotencyKey, CreateVendorRequest createVendorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = createVendorRequest;

        // create path and map variables
        String localVarPath = "/easy-split/vendors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGESCreateVendorsValidateBeforeCall(String xApiVersion, String xRequestId, UUID xIdempotencyKey, CreateVendorRequest createVendorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGESCreateVendors(Async)");
        }

        return pGESCreateVendorsCall(xApiVersion, xRequestId, xIdempotencyKey, createVendorRequest, _callback);

    }

    public ApiResponse<CreateVendorResponse> PGESCreateVendors(String xApiVersion, String xRequestId, UUID xIdempotencyKey, CreateVendorRequest createVendorRequest, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGESCreateVendorsValidateBeforeCall(xApiVersion, xRequestId, xIdempotencyKey, createVendorRequest, null);
        Type localVarReturnType = new TypeToken<CreateVendorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGESDownloadVendorsDocs
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param docType Mention the document type that has to be downloaded. Only an uploaded document can be downloaded. (required)
     * @param vendorId The id which uniquely identifies your vendor. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download Vendor Docs Success Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pGESDownloadVendorsDocsCall(String xApiVersion, String docType, String vendorId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/easy-split/vendor-docs/{vendor_id}/download/{doc_type}"
            .replace("{" + "doc_type" + "}", localVarApiClient.escapeString(docType.toString()))
            .replace("{" + "vendor_id" + "}", localVarApiClient.escapeString(vendorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGESDownloadVendorsDocsValidateBeforeCall(String xApiVersion, String docType, String vendorId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGESDownloadVendorsDocs(Async)");
        }

        // verify the required parameter 'docType' is set
        if (docType == null) {
            throw new ApiException("Missing the required parameter 'docType' when calling PGESDownloadVendorsDocs(Async)");
        }

        // verify the required parameter 'vendorId' is set
        if (vendorId == null) {
            throw new ApiException("Missing the required parameter 'vendorId' when calling PGESDownloadVendorsDocs(Async)");
        }

        return pGESDownloadVendorsDocsCall(xApiVersion, docType, vendorId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<VendorDocumentDownloadResponse> PGESDownloadVendorsDocs(String xApiVersion, String docType, String vendorId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGESDownloadVendorsDocsValidateBeforeCall(xApiVersion, docType, vendorId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<VendorDocumentDownloadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGESFetchVendors
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param vendorId The id which uniquely identifies your vendor. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Vendor Success Response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Get Vendor Docs Failure Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pGESFetchVendorsCall(String xApiVersion, String vendorId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/easy-split/vendors/{vendor_id}"
            .replace("{" + "vendor_id" + "}", localVarApiClient.escapeString(vendorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGESFetchVendorsValidateBeforeCall(String xApiVersion, String vendorId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGESFetchVendors(Async)");
        }

        // verify the required parameter 'vendorId' is set
        if (vendorId == null) {
            throw new ApiException("Missing the required parameter 'vendorId' when calling PGESFetchVendors(Async)");
        }

        return pGESFetchVendorsCall(xApiVersion, vendorId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<VendorEntity> PGESFetchVendors(String xApiVersion, String vendorId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGESFetchVendorsValidateBeforeCall(xApiVersion, vendorId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<VendorEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGESGetVendorBalance
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param vendorId The id which uniquely identifies your vendor. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Vendor Balance Success Response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Get Vendor Docs Failure Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pGESGetVendorBalanceCall(String xApiVersion, String vendorId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/easy-split/vendors/{vendor_id}/balances"
            .replace("{" + "vendor_id" + "}", localVarApiClient.escapeString(vendorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGESGetVendorBalanceValidateBeforeCall(String xApiVersion, String vendorId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGESGetVendorBalance(Async)");
        }

        // verify the required parameter 'vendorId' is set
        if (vendorId == null) {
            throw new ApiException("Missing the required parameter 'vendorId' when calling PGESGetVendorBalance(Async)");
        }

        return pGESGetVendorBalanceCall(xApiVersion, vendorId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<VendorBalance> PGESGetVendorBalance(String xApiVersion, String vendorId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGESGetVendorBalanceValidateBeforeCall(xApiVersion, vendorId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<VendorBalance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGESGetVendorBalanceTransferCharges
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param amount Specify the amount for which you want to view the service charges and service taxes in the response. (required)
     * @param rateType Mention the type of rate for which you want to check the charges. Possible value: VENDOR_ON_DEMAND (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Vendor Balance Transfer Charges Response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Get Vendor Balance Transfer Charges Failure Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pGESGetVendorBalanceTransferChargesCall(String xApiVersion, BigDecimal amount, String rateType, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/easy-split/amount/{amount}/charges"
            .replace("{" + "amount" + "}", localVarApiClient.escapeString(amount.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rateType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rate_type", rateType));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGESGetVendorBalanceTransferChargesValidateBeforeCall(String xApiVersion, BigDecimal amount, String rateType, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGESGetVendorBalanceTransferCharges(Async)");
        }

        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling PGESGetVendorBalanceTransferCharges(Async)");
        }

        // verify the required parameter 'rateType' is set
        if (rateType == null) {
            throw new ApiException("Missing the required parameter 'rateType' when calling PGESGetVendorBalanceTransferCharges(Async)");
        }

        return pGESGetVendorBalanceTransferChargesCall(xApiVersion, amount, rateType, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<VendorBalanceTransferCharges> PGESGetVendorBalanceTransferCharges(String xApiVersion, BigDecimal amount, String rateType, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGESGetVendorBalanceTransferChargesValidateBeforeCall(xApiVersion, amount, rateType, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<VendorBalanceTransferCharges>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGESGetVendorsDocs
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param vendorId The id which uniquely identifies your vendor. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Vendor Docs Success Response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Get Vendor Docs Failure Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pGESGetVendorsDocsCall(String xApiVersion, String vendorId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/easy-split/vendor-docs/{vendor_id}"
            .replace("{" + "vendor_id" + "}", localVarApiClient.escapeString(vendorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGESGetVendorsDocsValidateBeforeCall(String xApiVersion, String vendorId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGESGetVendorsDocs(Async)");
        }

        // verify the required parameter 'vendorId' is set
        if (vendorId == null) {
            throw new ApiException("Missing the required parameter 'vendorId' when calling PGESGetVendorsDocs(Async)");
        }

        return pGESGetVendorsDocsCall(xApiVersion, vendorId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<VendorDocumentsResponse> PGESGetVendorsDocs(String xApiVersion, String vendorId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGESGetVendorsDocsValidateBeforeCall(xApiVersion, vendorId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<VendorDocumentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGESOrderRecon
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param esOrderReconRequest Get Split and Settlement Details by OrderID v2.0 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ES Order Recon Success Response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ES Order Recon Failure Response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ES Order Recon Failure Response. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ES Order Recon Failure Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pGESOrderReconCall(String xApiVersion, String xRequestId, UUID xIdempotencyKey, ESOrderReconRequest esOrderReconRequest, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = esOrderReconRequest;

        // create path and map variables
        String localVarPath = "/split/order/vendor/recon";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGESOrderReconValidateBeforeCall(String xApiVersion, String xRequestId, UUID xIdempotencyKey, ESOrderReconRequest esOrderReconRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGESOrderRecon(Async)");
        }

        return pGESOrderReconCall(xApiVersion, xRequestId, xIdempotencyKey, esOrderReconRequest, _callback);

    }

    public ApiResponse<ESOrderReconResponse> PGESOrderRecon(String xApiVersion, String xRequestId, UUID xIdempotencyKey, ESOrderReconRequest esOrderReconRequest, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGESOrderReconValidateBeforeCall(xApiVersion, xRequestId, xIdempotencyKey, esOrderReconRequest, null);
        Type localVarReturnType = new TypeToken<ESOrderReconResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGESUpdateVendors
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param vendorId The id which uniquely identifies your vendor. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param updateVendorRequest Create Vendor Request Body. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Vendor Success Response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Update Vendor Failure Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pGESUpdateVendorsCall(String xApiVersion, String vendorId, String xRequestId, UUID xIdempotencyKey, UpdateVendorRequest updateVendorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = updateVendorRequest;

        // create path and map variables
        String localVarPath = "/easy-split/vendors/{vendor_id}"
            .replace("{" + "vendor_id" + "}", localVarApiClient.escapeString(vendorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGESUpdateVendorsValidateBeforeCall(String xApiVersion, String vendorId, String xRequestId, UUID xIdempotencyKey, UpdateVendorRequest updateVendorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGESUpdateVendors(Async)");
        }

        // verify the required parameter 'vendorId' is set
        if (vendorId == null) {
            throw new ApiException("Missing the required parameter 'vendorId' when calling PGESUpdateVendors(Async)");
        }

        return pGESUpdateVendorsCall(xApiVersion, vendorId, xRequestId, xIdempotencyKey, updateVendorRequest, _callback);

    }

    public ApiResponse<UpdateVendorResponse> PGESUpdateVendors(String xApiVersion, String vendorId, String xRequestId, UUID xIdempotencyKey, UpdateVendorRequest updateVendorRequest, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGESUpdateVendorsValidateBeforeCall(xApiVersion, vendorId, xRequestId, xIdempotencyKey, updateVendorRequest, null);
        Type localVarReturnType = new TypeToken<UpdateVendorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGESUploadVendorsDocs
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param vendorId The id which uniquely identifies your vendor. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param docType Mention the type of the document you are uploading. Possible values: UIDAI_FRONT, UIDAI_BACK, UIDAI_NUMBER, DL, DL_NUMBER, PASSPORT_FRONT, PASSPORT_BACK, PASSPORT_NUMBER, VOTER_ID, VOTER_ID_NUMBER, PAN, PAN_NUMBER, GST, GSTIN_NUMBER, CIN, CIN_NUMBER, NBFC_CERTIFICATE. If the doc type ends with a number you should add the doc value else upload the doc file. (optional)
     * @param docValue Enter the display name of the uploaded file. (optional)
     * @param _file Select the document that should be uploaded or provide the path of that file. You cannot upload a file that is more than 2MB in size. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload Vendor Docs Success Response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Upload Vendor Docs Failure Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pGESUploadVendorsDocsCall(String xApiVersion, String vendorId, String xRequestId, UUID xIdempotencyKey, String docType, String docValue, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/easy-split/vendor-docs/{vendor_id}"
            .replace("{" + "vendor_id" + "}", localVarApiClient.escapeString(vendorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (docType != null) {
            localVarFormParams.put("doc_type", docType);
        }

        if (docValue != null) {
            localVarFormParams.put("doc_value", docValue);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGESUploadVendorsDocsValidateBeforeCall(String xApiVersion, String vendorId, String xRequestId, UUID xIdempotencyKey, String docType, String docValue, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGESUploadVendorsDocs(Async)");
        }

        // verify the required parameter 'vendorId' is set
        if (vendorId == null) {
            throw new ApiException("Missing the required parameter 'vendorId' when calling PGESUploadVendorsDocs(Async)");
        }

        return pGESUploadVendorsDocsCall(xApiVersion, vendorId, xRequestId, xIdempotencyKey, docType, docValue, _file, _callback);

    }

    public ApiResponse<UploadVendorDocumentsResponse> PGESUploadVendorsDocs(String xApiVersion, String vendorId, String xRequestId, UUID xIdempotencyKey, String docType, String docValue, File _file, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGESUploadVendorsDocsValidateBeforeCall(xApiVersion, vendorId, xRequestId, xIdempotencyKey, docType, docValue, _file, null);
        Type localVarReturnType = new TypeToken<UploadVendorDocumentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGOrderSplitAfterPayment
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param orderId The id which uniquely identifies your order (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param splitAfterPaymentRequest Request Body to Create Split for an order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Split After Payment Success Response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Split After Payment Failure Response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Split After Payment Failure Response. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Split After Payment Failure Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pGOrderSplitAfterPaymentCall(String xApiVersion, String orderId, String xRequestId, UUID xIdempotencyKey, SplitAfterPaymentRequest splitAfterPaymentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = splitAfterPaymentRequest;

        // create path and map variables
        String localVarPath = "/easy-split/orders/{order_id}/split"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGOrderSplitAfterPaymentValidateBeforeCall(String xApiVersion, String orderId, String xRequestId, UUID xIdempotencyKey, SplitAfterPaymentRequest splitAfterPaymentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGOrderSplitAfterPayment(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling PGOrderSplitAfterPayment(Async)");
        }

        return pGOrderSplitAfterPaymentCall(xApiVersion, orderId, xRequestId, xIdempotencyKey, splitAfterPaymentRequest, _callback);

    }

    public ApiResponse<SplitAfterPaymentResponse> PGOrderSplitAfterPayment(String xApiVersion, String orderId, String xRequestId, UUID xIdempotencyKey, SplitAfterPaymentRequest splitAfterPaymentRequest, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGOrderSplitAfterPaymentValidateBeforeCall(xApiVersion, orderId, xRequestId, xIdempotencyKey, splitAfterPaymentRequest, null);
        Type localVarReturnType = new TypeToken<SplitAfterPaymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGOrderStaticSplit
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param staticSplitRequest Static Split (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Static Split Success Response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Static Split Failure Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pGOrderStaticSplitCall(String xApiVersion, String xRequestId, UUID xIdempotencyKey, StaticSplitRequest staticSplitRequest, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = staticSplitRequest;

        // create path and map variables
        String localVarPath = "/easy-split/static-split";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGOrderStaticSplitValidateBeforeCall(String xApiVersion, String xRequestId, UUID xIdempotencyKey, StaticSplitRequest staticSplitRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGOrderStaticSplit(Async)");
        }

        return pGOrderStaticSplitCall(xApiVersion, xRequestId, xIdempotencyKey, staticSplitRequest, _callback);

    }

    public ApiResponse<StaticSplitResponse> PGOrderStaticSplit(String xApiVersion, String xRequestId, UUID xIdempotencyKey, StaticSplitRequest staticSplitRequest, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGOrderStaticSplitValidateBeforeCall(xApiVersion, xRequestId, xIdempotencyKey, staticSplitRequest, null);
        Type localVarReturnType = new TypeToken<StaticSplitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGSplitOrderRecon
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param orderId The id which uniquely identifies your order (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Split and Settlement Details by OrderID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Split Order Recon Failure Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pGSplitOrderReconCall(String xApiVersion, String orderId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/easy-split/orders/{order_id}"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGSplitOrderReconValidateBeforeCall(String xApiVersion, String orderId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGSplitOrderRecon(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling PGSplitOrderRecon(Async)");
        }

        return pGSplitOrderReconCall(xApiVersion, orderId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<SplitOrderReconSuccessResponse> PGSplitOrderRecon(String xApiVersion, String orderId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGSplitOrderReconValidateBeforeCall(xApiVersion, orderId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<SplitOrderReconSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGEligibilityFetchCardlessEMI
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param eligibilityFetchCardlessEMIRequest Request Body to get eligible cardless emi options for a customer and order (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 502 </td><td> Bank related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGEligibilityFetchCardlessEMICall(String xApiVersion, EligibilityFetchCardlessEMIRequest eligibilityFetchCardlessEMIRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = eligibilityFetchCardlessEMIRequest;

        // create path and map variables
        String localVarPath = "/eligibility/cardlessemi";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGEligibilityFetchCardlessEMIValidateBeforeCall(String xApiVersion, EligibilityFetchCardlessEMIRequest eligibilityFetchCardlessEMIRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGEligibilityFetchCardlessEMI(Async)");
        }

        // verify the required parameter 'eligibilityFetchCardlessEMIRequest' is set
        if (eligibilityFetchCardlessEMIRequest == null) {
            throw new ApiException("Missing the required parameter 'eligibilityFetchCardlessEMIRequest' when calling PGEligibilityFetchCardlessEMI(Async)");
        }

        return pGEligibilityFetchCardlessEMICall(xApiVersion, eligibilityFetchCardlessEMIRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<List<EligibilityCardlessEMIEntity>> PGEligibilityFetchCardlessEMI(String xApiVersion, EligibilityFetchCardlessEMIRequest eligibilityFetchCardlessEMIRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGEligibilityFetchCardlessEMIValidateBeforeCall(xApiVersion, eligibilityFetchCardlessEMIRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<List<EligibilityCardlessEMIEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGEligibilityFetchOffers
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param eligibilityFetchOffersRequest Request Body to get eligible offers for a customer and order (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGEligibilityFetchOffersCall(String xApiVersion, EligibilityFetchOffersRequest eligibilityFetchOffersRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = eligibilityFetchOffersRequest;

        // create path and map variables
        String localVarPath = "/eligibility/offers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGEligibilityFetchOffersValidateBeforeCall(String xApiVersion, EligibilityFetchOffersRequest eligibilityFetchOffersRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGEligibilityFetchOffers(Async)");
        }

        // verify the required parameter 'eligibilityFetchOffersRequest' is set
        if (eligibilityFetchOffersRequest == null) {
            throw new ApiException("Missing the required parameter 'eligibilityFetchOffersRequest' when calling PGEligibilityFetchOffers(Async)");
        }

        return pGEligibilityFetchOffersCall(xApiVersion, eligibilityFetchOffersRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<List<EligibilityOfferEntity>> PGEligibilityFetchOffers(String xApiVersion, EligibilityFetchOffersRequest eligibilityFetchOffersRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGEligibilityFetchOffersValidateBeforeCall(xApiVersion, eligibilityFetchOffersRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<List<EligibilityOfferEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGEligibilityFetchPaylater
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param eligibilityFetchPaylaterRequest Request Body to get eligible paylater options for a customer and order (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 502 </td><td> Bank related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGEligibilityFetchPaylaterCall(String xApiVersion, EligibilityFetchPaylaterRequest eligibilityFetchPaylaterRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = eligibilityFetchPaylaterRequest;

        // create path and map variables
        String localVarPath = "/eligibility/paylater";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGEligibilityFetchPaylaterValidateBeforeCall(String xApiVersion, EligibilityFetchPaylaterRequest eligibilityFetchPaylaterRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGEligibilityFetchPaylater(Async)");
        }

        // verify the required parameter 'eligibilityFetchPaylaterRequest' is set
        if (eligibilityFetchPaylaterRequest == null) {
            throw new ApiException("Missing the required parameter 'eligibilityFetchPaylaterRequest' when calling PGEligibilityFetchPaylater(Async)");
        }

        return pGEligibilityFetchPaylaterCall(xApiVersion, eligibilityFetchPaylaterRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<List<EligibilityPaylaterEntity>> PGEligibilityFetchPaylater(String xApiVersion, EligibilityFetchPaylaterRequest eligibilityFetchPaylaterRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGEligibilityFetchPaylaterValidateBeforeCall(xApiVersion, eligibilityFetchPaylaterRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<List<EligibilityPaylaterEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGEligibilityFetchPaymentMethods
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param eligibilityFetchPaymentMethodsRequest Request Body to get eligible payment methods for an account and order (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 502 </td><td> Bank related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGEligibilityFetchPaymentMethodsCall(String xApiVersion, EligibilityFetchPaymentMethodsRequest eligibilityFetchPaymentMethodsRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = eligibilityFetchPaymentMethodsRequest;

        // create path and map variables
        String localVarPath = "/eligibility/payment_methods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGEligibilityFetchPaymentMethodsValidateBeforeCall(String xApiVersion, EligibilityFetchPaymentMethodsRequest eligibilityFetchPaymentMethodsRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGEligibilityFetchPaymentMethods(Async)");
        }

        // verify the required parameter 'eligibilityFetchPaymentMethodsRequest' is set
        if (eligibilityFetchPaymentMethodsRequest == null) {
            throw new ApiException("Missing the required parameter 'eligibilityFetchPaymentMethodsRequest' when calling PGEligibilityFetchPaymentMethods(Async)");
        }

        return pGEligibilityFetchPaymentMethodsCall(xApiVersion, eligibilityFetchPaymentMethodsRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<List<EligibilityPaymentMethodsEntity>> PGEligibilityFetchPaymentMethods(String xApiVersion, EligibilityFetchPaymentMethodsRequest eligibilityFetchPaymentMethodsRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGEligibilityFetchPaymentMethodsValidateBeforeCall(xApiVersion, eligibilityFetchPaymentMethodsRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<List<EligibilityPaymentMethodsEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGCreateOffer
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param createOfferRequest Request body to create an offer at Cashfree (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGCreateOfferCall(String xApiVersion, CreateOfferRequest createOfferRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = createOfferRequest;

        // create path and map variables
        String localVarPath = "/offers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGCreateOfferValidateBeforeCall(String xApiVersion, CreateOfferRequest createOfferRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGCreateOffer(Async)");
        }

        // verify the required parameter 'createOfferRequest' is set
        if (createOfferRequest == null) {
            throw new ApiException("Missing the required parameter 'createOfferRequest' when calling PGCreateOffer(Async)");
        }

        return pGCreateOfferCall(xApiVersion, createOfferRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<OfferEntity> PGCreateOffer(String xApiVersion, CreateOfferRequest createOfferRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGCreateOfferValidateBeforeCall(xApiVersion, createOfferRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<OfferEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGFetchOffer
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param offerId The offer ID for which you want to view the offer details. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGFetchOfferCall(String xApiVersion, String offerId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/{offer_id}"
            .replace("{" + "offer_id" + "}", localVarApiClient.escapeString(offerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGFetchOfferValidateBeforeCall(String xApiVersion, String offerId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGFetchOffer(Async)");
        }

        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling PGFetchOffer(Async)");
        }

        return pGFetchOfferCall(xApiVersion, offerId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<OfferEntity> PGFetchOffer(String xApiVersion, String offerId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGFetchOfferValidateBeforeCall(xApiVersion, offerId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<OfferEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGCreateOrder
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param createOrderRequest Request body to create an order at cashfree (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGCreateOrderCall(String xApiVersion, CreateOrderRequest createOrderRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = createOrderRequest;

        // create path and map variables
        String localVarPath = "/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGCreateOrderValidateBeforeCall(String xApiVersion, CreateOrderRequest createOrderRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGCreateOrder(Async)");
        }

        // verify the required parameter 'createOrderRequest' is set
        if (createOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrderRequest' when calling PGCreateOrder(Async)");
        }

        return pGCreateOrderCall(xApiVersion, createOrderRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<OrderEntity> PGCreateOrder(String xApiVersion, CreateOrderRequest createOrderRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGCreateOrderValidateBeforeCall(xApiVersion, createOrderRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<OrderEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGFetchOrder
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param orderId The id which uniquely identifies your order (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGFetchOrderCall(String xApiVersion, String orderId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{order_id}"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGFetchOrderValidateBeforeCall(String xApiVersion, String orderId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGFetchOrder(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling PGFetchOrder(Async)");
        }

        return pGFetchOrderCall(xApiVersion, orderId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<OrderEntity> PGFetchOrder(String xApiVersion, String orderId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGFetchOrderValidateBeforeCall(xApiVersion, orderId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<OrderEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGFetchOrderExtendedData
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param orderId The id which uniquely identifies your order (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGFetchOrderExtendedDataCall(String xApiVersion, String orderId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{order_id}/extended"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGFetchOrderExtendedDataValidateBeforeCall(String xApiVersion, String orderId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGFetchOrderExtendedData(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling PGFetchOrderExtendedData(Async)");
        }

        return pGFetchOrderExtendedDataCall(xApiVersion, orderId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<OrderExtendedDataEntity> PGFetchOrderExtendedData(String xApiVersion, String orderId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGFetchOrderExtendedDataValidateBeforeCall(xApiVersion, orderId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<OrderExtendedDataEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGTerminateOrder
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param orderId The id which uniquely identifies your order (required)
     * @param terminateOrderRequest Request body to terminate an order at cashfree (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGTerminateOrderCall(String xApiVersion, String orderId, TerminateOrderRequest terminateOrderRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = terminateOrderRequest;

        // create path and map variables
        String localVarPath = "/orders/{order_id}"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGTerminateOrderValidateBeforeCall(String xApiVersion, String orderId, TerminateOrderRequest terminateOrderRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGTerminateOrder(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling PGTerminateOrder(Async)");
        }

        // verify the required parameter 'terminateOrderRequest' is set
        if (terminateOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'terminateOrderRequest' when calling PGTerminateOrder(Async)");
        }

        return pGTerminateOrderCall(xApiVersion, orderId, terminateOrderRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<OrderEntity> PGTerminateOrder(String xApiVersion, String orderId, TerminateOrderRequest terminateOrderRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGTerminateOrderValidateBeforeCall(xApiVersion, orderId, terminateOrderRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<OrderEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGUpdateOrderExtendedData
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param orderId The id which uniquely identifies your order (required)
     * @param updateOrderExtendedRequest Request Body to Update extended data related to order (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGUpdateOrderExtendedDataCall(String xApiVersion, String orderId, UpdateOrderExtendedRequest updateOrderExtendedRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = updateOrderExtendedRequest;

        // create path and map variables
        String localVarPath = "/orders/{order_id}/extended"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGUpdateOrderExtendedDataValidateBeforeCall(String xApiVersion, String orderId, UpdateOrderExtendedRequest updateOrderExtendedRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGUpdateOrderExtendedData(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling PGUpdateOrderExtendedData(Async)");
        }

        // verify the required parameter 'updateOrderExtendedRequest' is set
        if (updateOrderExtendedRequest == null) {
            throw new ApiException("Missing the required parameter 'updateOrderExtendedRequest' when calling PGUpdateOrderExtendedData(Async)");
        }

        return pGUpdateOrderExtendedDataCall(xApiVersion, orderId, updateOrderExtendedRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<UpdateOrderExtendedDataEntity> PGUpdateOrderExtendedData(String xApiVersion, String orderId, UpdateOrderExtendedRequest updateOrderExtendedRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGUpdateOrderExtendedDataValidateBeforeCall(xApiVersion, orderId, updateOrderExtendedRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<UpdateOrderExtendedDataEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGCancelLink
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param linkId The payment link ID for which you want to view the details. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGCancelLinkCall(String xApiVersion, String linkId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/links/{link_id}/cancel"
            .replace("{" + "link_id" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGCancelLinkValidateBeforeCall(String xApiVersion, String linkId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGCancelLink(Async)");
        }

        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling PGCancelLink(Async)");
        }

        return pGCancelLinkCall(xApiVersion, linkId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<LinkEntity> PGCancelLink(String xApiVersion, String linkId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGCancelLinkValidateBeforeCall(xApiVersion, linkId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<LinkEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGCreateLink
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param createLinkRequest Request Body to Create Payment Links (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGCreateLinkCall(String xApiVersion, CreateLinkRequest createLinkRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = createLinkRequest;

        // create path and map variables
        String localVarPath = "/links";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGCreateLinkValidateBeforeCall(String xApiVersion, CreateLinkRequest createLinkRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGCreateLink(Async)");
        }

        // verify the required parameter 'createLinkRequest' is set
        if (createLinkRequest == null) {
            throw new ApiException("Missing the required parameter 'createLinkRequest' when calling PGCreateLink(Async)");
        }

        return pGCreateLinkCall(xApiVersion, createLinkRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<LinkEntity> PGCreateLink(String xApiVersion, CreateLinkRequest createLinkRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGCreateLinkValidateBeforeCall(xApiVersion, createLinkRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<LinkEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGFetchLink
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param linkId The payment link ID for which you want to view the details. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 502 </td><td> Bank related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGFetchLinkCall(String xApiVersion, String linkId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/links/{link_id}"
            .replace("{" + "link_id" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGFetchLinkValidateBeforeCall(String xApiVersion, String linkId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGFetchLink(Async)");
        }

        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling PGFetchLink(Async)");
        }

        return pGFetchLinkCall(xApiVersion, linkId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<LinkEntity> PGFetchLink(String xApiVersion, String linkId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGFetchLinkValidateBeforeCall(xApiVersion, linkId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<LinkEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGLinkFetchOrders
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param linkId The payment link ID for which you want to view the details. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param status Mention What is status of orders you want to fetch, default is PAID. Possible value: ALL, PAID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGLinkFetchOrdersCall(String xApiVersion, String linkId, String xRequestId, UUID xIdempotencyKey, String status, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/links/{link_id}/orders"
            .replace("{" + "link_id" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGLinkFetchOrdersValidateBeforeCall(String xApiVersion, String linkId, String xRequestId, UUID xIdempotencyKey, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGLinkFetchOrders(Async)");
        }

        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling PGLinkFetchOrders(Async)");
        }

        return pGLinkFetchOrdersCall(xApiVersion, linkId, xRequestId, xIdempotencyKey, status, _callback);

    }

    public ApiResponse<List<PaymentLinkOrderEntity>> PGLinkFetchOrders(String xApiVersion, String linkId, String xRequestId, UUID xIdempotencyKey, String status, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGLinkFetchOrdersValidateBeforeCall(xApiVersion, linkId, xRequestId, xIdempotencyKey, status, null);
        Type localVarReturnType = new TypeToken<List<PaymentLinkOrderEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGAuthorizeOrder
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param orderId The id which uniquely identifies your order (required)
     * @param authorizeOrderRequest Request to Capture or Void Transactions (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 502 </td><td> Bank related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGAuthorizeOrderCall(String xApiVersion, String orderId, AuthorizeOrderRequest authorizeOrderRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = authorizeOrderRequest;

        // create path and map variables
        String localVarPath = "/orders/{order_id}/authorization"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGAuthorizeOrderValidateBeforeCall(String xApiVersion, String orderId, AuthorizeOrderRequest authorizeOrderRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGAuthorizeOrder(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling PGAuthorizeOrder(Async)");
        }

        // verify the required parameter 'authorizeOrderRequest' is set
        if (authorizeOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'authorizeOrderRequest' when calling PGAuthorizeOrder(Async)");
        }

        return pGAuthorizeOrderCall(xApiVersion, orderId, authorizeOrderRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<PaymentEntity> PGAuthorizeOrder(String xApiVersion, String orderId, AuthorizeOrderRequest authorizeOrderRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGAuthorizeOrderValidateBeforeCall(xApiVersion, orderId, authorizeOrderRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<PaymentEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGOrderAuthenticatePayment
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param cfPaymentId The Cashfree payment or transaction ID. (required)
     * @param orderAuthenticatePaymentRequest Request body to submit/resend headless OTP. To use this API make sure you have headless OTP enabled for your account (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 502 </td><td> Bank related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGOrderAuthenticatePaymentCall(String xApiVersion, String cfPaymentId, OrderAuthenticatePaymentRequest orderAuthenticatePaymentRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = orderAuthenticatePaymentRequest;

        // create path and map variables
        String localVarPath = "/orders/pay/authenticate/{cf_payment_id}"
            .replace("{" + "cf_payment_id" + "}", localVarApiClient.escapeString(cfPaymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGOrderAuthenticatePaymentValidateBeforeCall(String xApiVersion, String cfPaymentId, OrderAuthenticatePaymentRequest orderAuthenticatePaymentRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGOrderAuthenticatePayment(Async)");
        }

        // verify the required parameter 'cfPaymentId' is set
        if (cfPaymentId == null) {
            throw new ApiException("Missing the required parameter 'cfPaymentId' when calling PGOrderAuthenticatePayment(Async)");
        }

        // verify the required parameter 'orderAuthenticatePaymentRequest' is set
        if (orderAuthenticatePaymentRequest == null) {
            throw new ApiException("Missing the required parameter 'orderAuthenticatePaymentRequest' when calling PGOrderAuthenticatePayment(Async)");
        }

        return pGOrderAuthenticatePaymentCall(xApiVersion, cfPaymentId, orderAuthenticatePaymentRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<OrderAuthenticateEntity> PGOrderAuthenticatePayment(String xApiVersion, String cfPaymentId, OrderAuthenticatePaymentRequest orderAuthenticatePaymentRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGOrderAuthenticatePaymentValidateBeforeCall(xApiVersion, cfPaymentId, orderAuthenticatePaymentRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<OrderAuthenticateEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGOrderFetchPayment
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param orderId The id which uniquely identifies your order (required)
     * @param cfPaymentId The Cashfree payment or transaction ID. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 502 </td><td> Bank related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGOrderFetchPaymentCall(String xApiVersion, String orderId, String cfPaymentId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{order_id}/payments/{cf_payment_id}"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()))
            .replace("{" + "cf_payment_id" + "}", localVarApiClient.escapeString(cfPaymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGOrderFetchPaymentValidateBeforeCall(String xApiVersion, String orderId, String cfPaymentId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGOrderFetchPayment(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling PGOrderFetchPayment(Async)");
        }

        // verify the required parameter 'cfPaymentId' is set
        if (cfPaymentId == null) {
            throw new ApiException("Missing the required parameter 'cfPaymentId' when calling PGOrderFetchPayment(Async)");
        }

        return pGOrderFetchPaymentCall(xApiVersion, orderId, cfPaymentId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<PaymentEntity> PGOrderFetchPayment(String xApiVersion, String orderId, String cfPaymentId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGOrderFetchPaymentValidateBeforeCall(xApiVersion, orderId, cfPaymentId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<PaymentEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGOrderFetchPayments
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param orderId The id which uniquely identifies your order (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of payment enttity </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 502 </td><td> Bank related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGOrderFetchPaymentsCall(String xApiVersion, String orderId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{order_id}/payments"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGOrderFetchPaymentsValidateBeforeCall(String xApiVersion, String orderId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGOrderFetchPayments(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling PGOrderFetchPayments(Async)");
        }

        return pGOrderFetchPaymentsCall(xApiVersion, orderId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<List<PaymentEntity>> PGOrderFetchPayments(String xApiVersion, String orderId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGOrderFetchPaymentsValidateBeforeCall(xApiVersion, orderId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<List<PaymentEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGPayOrder
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param payOrderRequest Request body to create a transaction at cashfree using &#x60;payment_session_id&#x60; (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 502 </td><td> Bank related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGPayOrderCall(String xApiVersion, PayOrderRequest payOrderRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = payOrderRequest;

        // create path and map variables
        String localVarPath = "/orders/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGPayOrderValidateBeforeCall(String xApiVersion, PayOrderRequest payOrderRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGPayOrder(Async)");
        }

        // verify the required parameter 'payOrderRequest' is set
        if (payOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'payOrderRequest' when calling PGPayOrder(Async)");
        }

        return pGPayOrderCall(xApiVersion, payOrderRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<PayOrderEntity> PGPayOrder(String xApiVersion, PayOrderRequest payOrderRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGPayOrderValidateBeforeCall(xApiVersion, payOrderRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<PayOrderEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGFetchRecon
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param fetchReconRequest Request Body for the reconciliation (required)
     * @param contentType application/json (optional)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param accept application/json (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGFetchReconCall(String xApiVersion, FetchReconRequest fetchReconRequest, String contentType, String xRequestId, UUID xIdempotencyKey, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = fetchReconRequest;

        // create path and map variables
        String localVarPath = "/recon";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGFetchReconValidateBeforeCall(String xApiVersion, FetchReconRequest fetchReconRequest, String contentType, String xRequestId, UUID xIdempotencyKey, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGFetchRecon(Async)");
        }

        // verify the required parameter 'fetchReconRequest' is set
        if (fetchReconRequest == null) {
            throw new ApiException("Missing the required parameter 'fetchReconRequest' when calling PGFetchRecon(Async)");
        }

        return pGFetchReconCall(xApiVersion, fetchReconRequest, contentType, xRequestId, xIdempotencyKey, accept, _callback);

    }

    public ApiResponse<ReconEntity> PGFetchRecon(String xApiVersion, FetchReconRequest fetchReconRequest, String contentType, String xRequestId, UUID xIdempotencyKey, String accept, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGFetchReconValidateBeforeCall(xApiVersion, fetchReconRequest, contentType, xRequestId, xIdempotencyKey, accept, null);
        Type localVarReturnType = new TypeToken<ReconEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGOrderCreateRefund
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param orderId The id which uniquely identifies your order (required)
     * @param orderCreateRefundRequest Request Body to Create Refunds (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Refund created </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 502 </td><td> Bank related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGOrderCreateRefundCall(String xApiVersion, String orderId, OrderCreateRefundRequest orderCreateRefundRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = orderCreateRefundRequest;

        // create path and map variables
        String localVarPath = "/orders/{order_id}/refunds"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGOrderCreateRefundValidateBeforeCall(String xApiVersion, String orderId, OrderCreateRefundRequest orderCreateRefundRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGOrderCreateRefund(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling PGOrderCreateRefund(Async)");
        }

        // verify the required parameter 'orderCreateRefundRequest' is set
        if (orderCreateRefundRequest == null) {
            throw new ApiException("Missing the required parameter 'orderCreateRefundRequest' when calling PGOrderCreateRefund(Async)");
        }

        return pGOrderCreateRefundCall(xApiVersion, orderId, orderCreateRefundRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<RefundEntity> PGOrderCreateRefund(String xApiVersion, String orderId, OrderCreateRefundRequest orderCreateRefundRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGOrderCreateRefundValidateBeforeCall(xApiVersion, orderId, orderCreateRefundRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<RefundEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGOrderFetchRefund
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param orderId The id which uniquely identifies your order (required)
     * @param refundId Refund Id of the refund you want to fetch. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 502 </td><td> Bank related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGOrderFetchRefundCall(String xApiVersion, String orderId, String refundId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{order_id}/refunds/{refund_id}"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()))
            .replace("{" + "refund_id" + "}", localVarApiClient.escapeString(refundId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGOrderFetchRefundValidateBeforeCall(String xApiVersion, String orderId, String refundId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGOrderFetchRefund(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling PGOrderFetchRefund(Async)");
        }

        // verify the required parameter 'refundId' is set
        if (refundId == null) {
            throw new ApiException("Missing the required parameter 'refundId' when calling PGOrderFetchRefund(Async)");
        }

        return pGOrderFetchRefundCall(xApiVersion, orderId, refundId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<RefundEntity> PGOrderFetchRefund(String xApiVersion, String orderId, String refundId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGOrderFetchRefundValidateBeforeCall(xApiVersion, orderId, refundId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<RefundEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGOrderFetchRefunds
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param orderId The id which uniquely identifies your order (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGOrderFetchRefundsCall(String xApiVersion, String orderId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{order_id}/refunds"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGOrderFetchRefundsValidateBeforeCall(String xApiVersion, String orderId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGOrderFetchRefunds(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling PGOrderFetchRefunds(Async)");
        }

        return pGOrderFetchRefundsCall(xApiVersion, orderId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<List<RefundEntity>> PGOrderFetchRefunds(String xApiVersion, String orderId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGOrderFetchRefundsValidateBeforeCall(xApiVersion, orderId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<List<RefundEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGFetchSettlements
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param fetchSettlementsRequest Request Body to get the settlements (required)
     * @param contentType application/json (optional)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param accept application/json (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGFetchSettlementsCall(String xApiVersion, FetchSettlementsRequest fetchSettlementsRequest, String contentType, String xRequestId, UUID xIdempotencyKey, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = fetchSettlementsRequest;

        // create path and map variables
        String localVarPath = "/settlements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGFetchSettlementsValidateBeforeCall(String xApiVersion, FetchSettlementsRequest fetchSettlementsRequest, String contentType, String xRequestId, UUID xIdempotencyKey, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGFetchSettlements(Async)");
        }

        // verify the required parameter 'fetchSettlementsRequest' is set
        if (fetchSettlementsRequest == null) {
            throw new ApiException("Missing the required parameter 'fetchSettlementsRequest' when calling PGFetchSettlements(Async)");
        }

        return pGFetchSettlementsCall(xApiVersion, fetchSettlementsRequest, contentType, xRequestId, xIdempotencyKey, accept, _callback);

    }

    public ApiResponse<SettlementEntity> PGFetchSettlements(String xApiVersion, FetchSettlementsRequest fetchSettlementsRequest, String contentType, String xRequestId, UUID xIdempotencyKey, String accept, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGFetchSettlementsValidateBeforeCall(xApiVersion, fetchSettlementsRequest, contentType, xRequestId, xIdempotencyKey, accept, null);
        Type localVarReturnType = new TypeToken<SettlementEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGSettlementFetchRecon
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param settlementFetchReconRequest Request Body for the settlement reconciliation (required)
     * @param contentType application/json (optional)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param accept application/json (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGSettlementFetchReconCall(String xApiVersion, SettlementFetchReconRequest settlementFetchReconRequest, String contentType, String xRequestId, UUID xIdempotencyKey, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = settlementFetchReconRequest;

        // create path and map variables
        String localVarPath = "/settlement/recon";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGSettlementFetchReconValidateBeforeCall(String xApiVersion, SettlementFetchReconRequest settlementFetchReconRequest, String contentType, String xRequestId, UUID xIdempotencyKey, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGSettlementFetchRecon(Async)");
        }

        // verify the required parameter 'settlementFetchReconRequest' is set
        if (settlementFetchReconRequest == null) {
            throw new ApiException("Missing the required parameter 'settlementFetchReconRequest' when calling PGSettlementFetchRecon(Async)");
        }

        return pGSettlementFetchReconCall(xApiVersion, settlementFetchReconRequest, contentType, xRequestId, xIdempotencyKey, accept, _callback);

    }

    public ApiResponse<SettlementReconEntity> PGSettlementFetchRecon(String xApiVersion, SettlementFetchReconRequest settlementFetchReconRequest, String contentType, String xRequestId, UUID xIdempotencyKey, String accept, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGSettlementFetchReconValidateBeforeCall(xApiVersion, settlementFetchReconRequest, contentType, xRequestId, xIdempotencyKey, accept, null);
        Type localVarReturnType = new TypeToken<SettlementReconEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for markForSettlement
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param createOrderSettlementRequestBody Create Order Settlement Request Body. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Create Settlement Failure Response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Create Settlement Failure Response. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call markForSettlementCall(String xApiVersion, String xRequestId, UUID xIdempotencyKey, CreateOrderSettlementRequestBody createOrderSettlementRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = createOrderSettlementRequestBody;

        // create path and map variables
        String localVarPath = "/orders/settlements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markForSettlementValidateBeforeCall(String xApiVersion, String xRequestId, UUID xIdempotencyKey, CreateOrderSettlementRequestBody createOrderSettlementRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling MarkForSettlement(Async)");
        }

        return markForSettlementCall(xApiVersion, xRequestId, xIdempotencyKey, createOrderSettlementRequestBody, _callback);

    }

    public ApiResponse<Object> MarkForSettlement(String xApiVersion, String xRequestId, UUID xIdempotencyKey, CreateOrderSettlementRequestBody createOrderSettlementRequestBody, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = markForSettlementValidateBeforeCall(xApiVersion, xRequestId, xIdempotencyKey, createOrderSettlementRequestBody, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGOrderFetchSettlement
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param orderId The id which uniquely identifies your order (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 502 </td><td> Bank related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGOrderFetchSettlementCall(String xApiVersion, String orderId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{order_id}/settlements"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGOrderFetchSettlementValidateBeforeCall(String xApiVersion, String orderId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGOrderFetchSettlement(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling PGOrderFetchSettlement(Async)");
        }

        return pGOrderFetchSettlementCall(xApiVersion, orderId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<SettlementEntity> PGOrderFetchSettlement(String xApiVersion, String orderId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGOrderFetchSettlementValidateBeforeCall(xApiVersion, orderId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<SettlementEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGFetchSimulation
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param simulationId Provide the SimulationId for which the details have to be fetched. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetched Simulated Response </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGFetchSimulationCall(String xApiVersion, String simulationId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulate/{simulation_id}"
            .replace("{" + "simulation_id" + "}", localVarApiClient.escapeString(simulationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGFetchSimulationValidateBeforeCall(String xApiVersion, String simulationId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGFetchSimulation(Async)");
        }

        // verify the required parameter 'simulationId' is set
        if (simulationId == null) {
            throw new ApiException("Missing the required parameter 'simulationId' when calling PGFetchSimulation(Async)");
        }

        return pGFetchSimulationCall(xApiVersion, simulationId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<SimulationResponse> PGFetchSimulation(String xApiVersion, String simulationId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGFetchSimulationValidateBeforeCall(xApiVersion, simulationId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<SimulationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGSimulatePayment
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param simulateRequest Request Body to Make Simulation (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment Simulated Response </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGSimulatePaymentCall(String xApiVersion, SimulateRequest simulateRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = simulateRequest;

        // create path and map variables
        String localVarPath = "/simulate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGSimulatePaymentValidateBeforeCall(String xApiVersion, SimulateRequest simulateRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGSimulatePayment(Async)");
        }

        // verify the required parameter 'simulateRequest' is set
        if (simulateRequest == null) {
            throw new ApiException("Missing the required parameter 'simulateRequest' when calling PGSimulatePayment(Async)");
        }

        return pGSimulatePaymentCall(xApiVersion, simulateRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<SimulationResponse> PGSimulatePayment(String xApiVersion, SimulateRequest simulateRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGSimulatePaymentValidateBeforeCall(xApiVersion, simulateRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<SimulationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for sposCreateTerminal
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param createTerminalRequest Request Body to Create Terminal for SPOS (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Terminal created </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call sposCreateTerminalCall(String xApiVersion, CreateTerminalRequest createTerminalRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = createTerminalRequest;

        // create path and map variables
        String localVarPath = "/terminal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sposCreateTerminalValidateBeforeCall(String xApiVersion, CreateTerminalRequest createTerminalRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling SposCreateTerminal(Async)");
        }

        // verify the required parameter 'createTerminalRequest' is set
        if (createTerminalRequest == null) {
            throw new ApiException("Missing the required parameter 'createTerminalRequest' when calling SposCreateTerminal(Async)");
        }

        return sposCreateTerminalCall(xApiVersion, createTerminalRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<TerminalEntity> SposCreateTerminal(String xApiVersion, CreateTerminalRequest createTerminalRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = sposCreateTerminalValidateBeforeCall(xApiVersion, createTerminalRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<TerminalEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for sposCreateTerminalTransaction
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param createTerminalTransactionRequest Request body to create a terminal transaction (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Terminal Transaction created </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call sposCreateTerminalTransactionCall(String xApiVersion, CreateTerminalTransactionRequest createTerminalTransactionRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = createTerminalTransactionRequest;

        // create path and map variables
        String localVarPath = "/terminal/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sposCreateTerminalTransactionValidateBeforeCall(String xApiVersion, CreateTerminalTransactionRequest createTerminalTransactionRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling SposCreateTerminalTransaction(Async)");
        }

        // verify the required parameter 'createTerminalTransactionRequest' is set
        if (createTerminalTransactionRequest == null) {
            throw new ApiException("Missing the required parameter 'createTerminalTransactionRequest' when calling SposCreateTerminalTransaction(Async)");
        }

        return sposCreateTerminalTransactionCall(xApiVersion, createTerminalTransactionRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<TerminalTransactionEntity> SposCreateTerminalTransaction(String xApiVersion, CreateTerminalTransactionRequest createTerminalTransactionRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = sposCreateTerminalTransactionValidateBeforeCall(xApiVersion, createTerminalTransactionRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<TerminalTransactionEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for sposDemapSoundboxVpa
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param demapSoundboxVpaRequest Request body to demap soundbox vpa (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Soundbox vpa demapped Successfully </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call sposDemapSoundboxVpaCall(String xApiVersion, DemapSoundboxVpaRequest demapSoundboxVpaRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = demapSoundboxVpaRequest;

        // create path and map variables
        String localVarPath = "/terminal/demap/soundbox";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sposDemapSoundboxVpaValidateBeforeCall(String xApiVersion, DemapSoundboxVpaRequest demapSoundboxVpaRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling SposDemapSoundboxVpa(Async)");
        }

        // verify the required parameter 'demapSoundboxVpaRequest' is set
        if (demapSoundboxVpaRequest == null) {
            throw new ApiException("Missing the required parameter 'demapSoundboxVpaRequest' when calling SposDemapSoundboxVpa(Async)");
        }

        return sposDemapSoundboxVpaCall(xApiVersion, demapSoundboxVpaRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<List<SoundboxVpaEntity>> SposDemapSoundboxVpa(String xApiVersion, DemapSoundboxVpaRequest demapSoundboxVpaRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = sposDemapSoundboxVpaValidateBeforeCall(xApiVersion, demapSoundboxVpaRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<List<SoundboxVpaEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for sposFetchTerminal
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param terminalPhoneNo The terminal for which you want to view the order details. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call sposFetchTerminalCall(String xApiVersion, String terminalPhoneNo, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminal/{terminal_phone_no}"
            .replace("{" + "terminal_phone_no" + "}", localVarApiClient.escapeString(terminalPhoneNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sposFetchTerminalValidateBeforeCall(String xApiVersion, String terminalPhoneNo, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling SposFetchTerminal(Async)");
        }

        // verify the required parameter 'terminalPhoneNo' is set
        if (terminalPhoneNo == null) {
            throw new ApiException("Missing the required parameter 'terminalPhoneNo' when calling SposFetchTerminal(Async)");
        }

        return sposFetchTerminalCall(xApiVersion, terminalPhoneNo, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<TerminalEntity> SposFetchTerminal(String xApiVersion, String terminalPhoneNo, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = sposFetchTerminalValidateBeforeCall(xApiVersion, terminalPhoneNo, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<TerminalEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for sposFetchTerminalQRCodes
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param terminalPhoneNo Phone number assigned to the terminal. Required if you are not providing the cf_terminal_id in the request. (required)
     * @param cfTerminalId Cashfree terminal id for which you want to get staticQRs. Required if you are not providing the terminal_phone_number in the request. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetched Terminal QR Codes </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call sposFetchTerminalQRCodesCall(String xApiVersion, String terminalPhoneNo, String cfTerminalId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminal/qrcodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (terminalPhoneNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("terminal_phone_no", terminalPhoneNo));
        }

        if (cfTerminalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cf_terminal_id", cfTerminalId));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sposFetchTerminalQRCodesValidateBeforeCall(String xApiVersion, String terminalPhoneNo, String cfTerminalId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling SposFetchTerminalQRCodes(Async)");
        }

        // verify the required parameter 'terminalPhoneNo' is set
        if (terminalPhoneNo == null) {
            throw new ApiException("Missing the required parameter 'terminalPhoneNo' when calling SposFetchTerminalQRCodes(Async)");
        }

        // verify the required parameter 'cfTerminalId' is set
        if (cfTerminalId == null) {
            throw new ApiException("Missing the required parameter 'cfTerminalId' when calling SposFetchTerminalQRCodes(Async)");
        }

        return sposFetchTerminalQRCodesCall(xApiVersion, terminalPhoneNo, cfTerminalId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<List<FetchTerminalQRCodesEntity>> SposFetchTerminalQRCodes(String xApiVersion, String terminalPhoneNo, String cfTerminalId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = sposFetchTerminalQRCodesValidateBeforeCall(xApiVersion, terminalPhoneNo, cfTerminalId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<List<FetchTerminalQRCodesEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for sposFetchTerminalSoundboxVpa
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param deviceSerialNo Device Serial No assinged. Required if you are not providing the cf_terminal_id in the request. (required)
     * @param cfTerminalId Cashfree terminal id for which you want to get Soundbox Vpa. Required if you are not providing the device_serial_no in the request. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetched Terminal Soundbox Vpa </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call sposFetchTerminalSoundboxVpaCall(String xApiVersion, String deviceSerialNo, String cfTerminalId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminal/soundbox/qrcodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceSerialNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_serial_no", deviceSerialNo));
        }

        if (cfTerminalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cf_terminal_id", cfTerminalId));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sposFetchTerminalSoundboxVpaValidateBeforeCall(String xApiVersion, String deviceSerialNo, String cfTerminalId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling SposFetchTerminalSoundboxVpa(Async)");
        }

        // verify the required parameter 'deviceSerialNo' is set
        if (deviceSerialNo == null) {
            throw new ApiException("Missing the required parameter 'deviceSerialNo' when calling SposFetchTerminalSoundboxVpa(Async)");
        }

        // verify the required parameter 'cfTerminalId' is set
        if (cfTerminalId == null) {
            throw new ApiException("Missing the required parameter 'cfTerminalId' when calling SposFetchTerminalSoundboxVpa(Async)");
        }

        return sposFetchTerminalSoundboxVpaCall(xApiVersion, deviceSerialNo, cfTerminalId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<List<SoundboxVpaEntity>> SposFetchTerminalSoundboxVpa(String xApiVersion, String deviceSerialNo, String cfTerminalId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = sposFetchTerminalSoundboxVpaValidateBeforeCall(xApiVersion, deviceSerialNo, cfTerminalId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<List<SoundboxVpaEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for sposFetchTerminalTransaction
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param utr Utr of the transaction. (required)
     * @param cfTerminalId Provide the Cashfree terminal ID for which the details have to be updated. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch Terminal Transaction </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call sposFetchTerminalTransactionCall(String xApiVersion, String utr, String cfTerminalId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminal/{cf_terminal_id}/payments"
            .replace("{" + "cf_terminal_id" + "}", localVarApiClient.escapeString(cfTerminalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (utr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("utr", utr));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sposFetchTerminalTransactionValidateBeforeCall(String xApiVersion, String utr, String cfTerminalId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling SposFetchTerminalTransaction(Async)");
        }

        // verify the required parameter 'utr' is set
        if (utr == null) {
            throw new ApiException("Missing the required parameter 'utr' when calling SposFetchTerminalTransaction(Async)");
        }

        // verify the required parameter 'cfTerminalId' is set
        if (cfTerminalId == null) {
            throw new ApiException("Missing the required parameter 'cfTerminalId' when calling SposFetchTerminalTransaction(Async)");
        }

        return sposFetchTerminalTransactionCall(xApiVersion, utr, cfTerminalId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<TerminalPaymentEntity> SposFetchTerminalTransaction(String xApiVersion, String utr, String cfTerminalId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = sposFetchTerminalTransactionValidateBeforeCall(xApiVersion, utr, cfTerminalId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<TerminalPaymentEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for sposOnboardSoundboxVpa
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param onboardSoundboxVpaRequest Request body to onboard soundbox vpa (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Soundbox vpa onboarded Successfully </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call sposOnboardSoundboxVpaCall(String xApiVersion, OnboardSoundboxVpaRequest onboardSoundboxVpaRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = onboardSoundboxVpaRequest;

        // create path and map variables
        String localVarPath = "/terminal/soundbox";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sposOnboardSoundboxVpaValidateBeforeCall(String xApiVersion, OnboardSoundboxVpaRequest onboardSoundboxVpaRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling SposOnboardSoundboxVpa(Async)");
        }

        // verify the required parameter 'onboardSoundboxVpaRequest' is set
        if (onboardSoundboxVpaRequest == null) {
            throw new ApiException("Missing the required parameter 'onboardSoundboxVpaRequest' when calling SposOnboardSoundboxVpa(Async)");
        }

        return sposOnboardSoundboxVpaCall(xApiVersion, onboardSoundboxVpaRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<SoundboxVpaEntity> SposOnboardSoundboxVpa(String xApiVersion, OnboardSoundboxVpaRequest onboardSoundboxVpaRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = sposOnboardSoundboxVpaValidateBeforeCall(xApiVersion, onboardSoundboxVpaRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<SoundboxVpaEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for sposUpdateSoundboxVpa
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param cfTerminalId Provide the Cashfree terminal ID for which the details have to be updated. (required)
     * @param updateSoundboxVpaRequest Request body to update soundbox vpa (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Soundbox vpa updated Successfully </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call sposUpdateSoundboxVpaCall(String xApiVersion, String cfTerminalId, UpdateSoundboxVpaRequest updateSoundboxVpaRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = updateSoundboxVpaRequest;

        // create path and map variables
        String localVarPath = "/terminal/{cf_terminal_id}/soundbox"
            .replace("{" + "cf_terminal_id" + "}", localVarApiClient.escapeString(cfTerminalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sposUpdateSoundboxVpaValidateBeforeCall(String xApiVersion, String cfTerminalId, UpdateSoundboxVpaRequest updateSoundboxVpaRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling SposUpdateSoundboxVpa(Async)");
        }

        // verify the required parameter 'cfTerminalId' is set
        if (cfTerminalId == null) {
            throw new ApiException("Missing the required parameter 'cfTerminalId' when calling SposUpdateSoundboxVpa(Async)");
        }

        // verify the required parameter 'updateSoundboxVpaRequest' is set
        if (updateSoundboxVpaRequest == null) {
            throw new ApiException("Missing the required parameter 'updateSoundboxVpaRequest' when calling SposUpdateSoundboxVpa(Async)");
        }

        return sposUpdateSoundboxVpaCall(xApiVersion, cfTerminalId, updateSoundboxVpaRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<SoundboxVpaEntity> SposUpdateSoundboxVpa(String xApiVersion, String cfTerminalId, UpdateSoundboxVpaRequest updateSoundboxVpaRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = sposUpdateSoundboxVpaValidateBeforeCall(xApiVersion, cfTerminalId, updateSoundboxVpaRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<SoundboxVpaEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for sposUpdateTerminal
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param cfTerminalId Provide the Cashfree terminal ID for which the details have to be updated. (required)
     * @param updateTerminalRequest Request Body to update terminal for SPOS. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated Terminal </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call sposUpdateTerminalCall(String xApiVersion, String cfTerminalId, UpdateTerminalRequest updateTerminalRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = updateTerminalRequest;

        // create path and map variables
        String localVarPath = "/terminal/{cf_terminal_id}"
            .replace("{" + "cf_terminal_id" + "}", localVarApiClient.escapeString(cfTerminalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sposUpdateTerminalValidateBeforeCall(String xApiVersion, String cfTerminalId, UpdateTerminalRequest updateTerminalRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling SposUpdateTerminal(Async)");
        }

        // verify the required parameter 'cfTerminalId' is set
        if (cfTerminalId == null) {
            throw new ApiException("Missing the required parameter 'cfTerminalId' when calling SposUpdateTerminal(Async)");
        }

        // verify the required parameter 'updateTerminalRequest' is set
        if (updateTerminalRequest == null) {
            throw new ApiException("Missing the required parameter 'updateTerminalRequest' when calling SposUpdateTerminal(Async)");
        }

        return sposUpdateTerminalCall(xApiVersion, cfTerminalId, updateTerminalRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<List<UpdateTerminalEntity>> SposUpdateTerminal(String xApiVersion, String cfTerminalId, UpdateTerminalRequest updateTerminalRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = sposUpdateTerminalValidateBeforeCall(xApiVersion, cfTerminalId, updateTerminalRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<List<UpdateTerminalEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for sposUpdateTerminalStatus
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param cfTerminalId Provide the Cashfree terminal ID for which the details have to be updated. (required)
     * @param updateTerminalStatusRequest Request Body to update terminal status for SPOS. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated Terminal Status </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call sposUpdateTerminalStatusCall(String xApiVersion, String cfTerminalId, UpdateTerminalStatusRequest updateTerminalStatusRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = updateTerminalStatusRequest;

        // create path and map variables
        String localVarPath = "/terminal/{cf_terminal_id}/status"
            .replace("{" + "cf_terminal_id" + "}", localVarApiClient.escapeString(cfTerminalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sposUpdateTerminalStatusValidateBeforeCall(String xApiVersion, String cfTerminalId, UpdateTerminalStatusRequest updateTerminalStatusRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling SposUpdateTerminalStatus(Async)");
        }

        // verify the required parameter 'cfTerminalId' is set
        if (cfTerminalId == null) {
            throw new ApiException("Missing the required parameter 'cfTerminalId' when calling SposUpdateTerminalStatus(Async)");
        }

        // verify the required parameter 'updateTerminalStatusRequest' is set
        if (updateTerminalStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'updateTerminalStatusRequest' when calling SposUpdateTerminalStatus(Async)");
        }

        return sposUpdateTerminalStatusCall(xApiVersion, cfTerminalId, updateTerminalStatusRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<List<UpdateTerminalEntity>> SposUpdateTerminalStatus(String xApiVersion, String cfTerminalId, UpdateTerminalStatusRequest updateTerminalStatusRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = sposUpdateTerminalStatusValidateBeforeCall(xApiVersion, cfTerminalId, updateTerminalStatusRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<List<UpdateTerminalEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for sposUploadTerminalDocs
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param cfTerminalId Provide the Cashfree terminal ID for which the details have to be updated. (required)
     * @param uploadTerminalDocs Request Body to update terminal documents for SPOS. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload Terminal Docs </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call sposUploadTerminalDocsCall(String xApiVersion, String cfTerminalId, UploadTerminalDocs uploadTerminalDocs, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = uploadTerminalDocs;

        // create path and map variables
        String localVarPath = "/terminal/{cf_terminal_id}/docs"
            .replace("{" + "cf_terminal_id" + "}", localVarApiClient.escapeString(cfTerminalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sposUploadTerminalDocsValidateBeforeCall(String xApiVersion, String cfTerminalId, UploadTerminalDocs uploadTerminalDocs, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling SposUploadTerminalDocs(Async)");
        }

        // verify the required parameter 'cfTerminalId' is set
        if (cfTerminalId == null) {
            throw new ApiException("Missing the required parameter 'cfTerminalId' when calling SposUploadTerminalDocs(Async)");
        }

        // verify the required parameter 'uploadTerminalDocs' is set
        if (uploadTerminalDocs == null) {
            throw new ApiException("Missing the required parameter 'uploadTerminalDocs' when calling SposUploadTerminalDocs(Async)");
        }

        return sposUploadTerminalDocsCall(xApiVersion, cfTerminalId, uploadTerminalDocs, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<List<UploadTerminalDocsEntity>> SposUploadTerminalDocs(String xApiVersion, String cfTerminalId, UploadTerminalDocs uploadTerminalDocs, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = sposUploadTerminalDocsValidateBeforeCall(xApiVersion, cfTerminalId, uploadTerminalDocs, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<List<UploadTerminalDocsEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for subsCreatePayment
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param createSubscriptionPaymentRequest Request body to create a subscription payment. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response of created payment. </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call subsCreatePaymentCall(String xApiVersion, CreateSubscriptionPaymentRequest createSubscriptionPaymentRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = createSubscriptionPaymentRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/pay";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subsCreatePaymentValidateBeforeCall(String xApiVersion, CreateSubscriptionPaymentRequest createSubscriptionPaymentRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling SubsCreatePayment(Async)");
        }

        // verify the required parameter 'createSubscriptionPaymentRequest' is set
        if (createSubscriptionPaymentRequest == null) {
            throw new ApiException("Missing the required parameter 'createSubscriptionPaymentRequest' when calling SubsCreatePayment(Async)");
        }

        return subsCreatePaymentCall(xApiVersion, createSubscriptionPaymentRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<CreateSubscriptionPaymentResponse> SubsCreatePayment(String xApiVersion, CreateSubscriptionPaymentRequest createSubscriptionPaymentRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = subsCreatePaymentValidateBeforeCall(xApiVersion, createSubscriptionPaymentRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<CreateSubscriptionPaymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for subsCreatePlan
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param createPlanRequest Request body to create a plan. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Plan Created </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call subsCreatePlanCall(String xApiVersion, CreatePlanRequest createPlanRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = createPlanRequest;

        // create path and map variables
        String localVarPath = "/plans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subsCreatePlanValidateBeforeCall(String xApiVersion, CreatePlanRequest createPlanRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling SubsCreatePlan(Async)");
        }

        // verify the required parameter 'createPlanRequest' is set
        if (createPlanRequest == null) {
            throw new ApiException("Missing the required parameter 'createPlanRequest' when calling SubsCreatePlan(Async)");
        }

        return subsCreatePlanCall(xApiVersion, createPlanRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<PlanEntity> SubsCreatePlan(String xApiVersion, CreatePlanRequest createPlanRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = subsCreatePlanValidateBeforeCall(xApiVersion, createPlanRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<PlanEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for subsCreateRefund
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param subscriptionId Provide the SubscriptionId using which the subscription was created. (required)
     * @param createSubscriptionRefundRequest Request body to create a subscription refund. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Refund Initiated </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call subsCreateRefundCall(String xApiVersion, String subscriptionId, CreateSubscriptionRefundRequest createSubscriptionRefundRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = createSubscriptionRefundRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscription_id}/refunds"
            .replace("{" + "subscription_id" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subsCreateRefundValidateBeforeCall(String xApiVersion, String subscriptionId, CreateSubscriptionRefundRequest createSubscriptionRefundRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling SubsCreateRefund(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling SubsCreateRefund(Async)");
        }

        // verify the required parameter 'createSubscriptionRefundRequest' is set
        if (createSubscriptionRefundRequest == null) {
            throw new ApiException("Missing the required parameter 'createSubscriptionRefundRequest' when calling SubsCreateRefund(Async)");
        }

        return subsCreateRefundCall(xApiVersion, subscriptionId, createSubscriptionRefundRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<SubscriptionPaymentRefundEntity> SubsCreateRefund(String xApiVersion, String subscriptionId, CreateSubscriptionRefundRequest createSubscriptionRefundRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = subsCreateRefundValidateBeforeCall(xApiVersion, subscriptionId, createSubscriptionRefundRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<SubscriptionPaymentRefundEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for subsCreateSubscription
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param createSubscriptionRequest Request body to create a subscription. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription Created </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call subsCreateSubscriptionCall(String xApiVersion, CreateSubscriptionRequest createSubscriptionRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = createSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subsCreateSubscriptionValidateBeforeCall(String xApiVersion, CreateSubscriptionRequest createSubscriptionRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling SubsCreateSubscription(Async)");
        }

        // verify the required parameter 'createSubscriptionRequest' is set
        if (createSubscriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'createSubscriptionRequest' when calling SubsCreateSubscription(Async)");
        }

        return subsCreateSubscriptionCall(xApiVersion, createSubscriptionRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<SubscriptionEntity> SubsCreateSubscription(String xApiVersion, CreateSubscriptionRequest createSubscriptionRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = subsCreateSubscriptionValidateBeforeCall(xApiVersion, createSubscriptionRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<SubscriptionEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for subsFetchPlan
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param planId Provide the PlanId for which the details have to be fetched. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetched Plan Response </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call subsFetchPlanCall(String xApiVersion, String planId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/plans/{plan_id}"
            .replace("{" + "plan_id" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subsFetchPlanValidateBeforeCall(String xApiVersion, String planId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling SubsFetchPlan(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling SubsFetchPlan(Async)");
        }

        return subsFetchPlanCall(xApiVersion, planId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<PlanEntity> SubsFetchPlan(String xApiVersion, String planId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = subsFetchPlanValidateBeforeCall(xApiVersion, planId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<PlanEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for subsFetchSubscription
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param subscriptionId Provide the SubscriptionId using which the subscription was created. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetched Subscription Response </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call subsFetchSubscriptionCall(String xApiVersion, String subscriptionId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscription_id}"
            .replace("{" + "subscription_id" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subsFetchSubscriptionValidateBeforeCall(String xApiVersion, String subscriptionId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling SubsFetchSubscription(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling SubsFetchSubscription(Async)");
        }

        return subsFetchSubscriptionCall(xApiVersion, subscriptionId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<SubscriptionEntity> SubsFetchSubscription(String xApiVersion, String subscriptionId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = subsFetchSubscriptionValidateBeforeCall(xApiVersion, subscriptionId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<SubscriptionEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for subsFetchSubscriptionPayment
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param subscriptionId Provide the SubscriptionId using which the subscription was created. (required)
     * @param paymentId Provide the PaymentId using which the payment was created. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetched Payment Response </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call subsFetchSubscriptionPaymentCall(String xApiVersion, String subscriptionId, String paymentId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscription_id}/payments/{payment_id}"
            .replace("{" + "subscription_id" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "payment_id" + "}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subsFetchSubscriptionPaymentValidateBeforeCall(String xApiVersion, String subscriptionId, String paymentId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling SubsFetchSubscriptionPayment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling SubsFetchSubscriptionPayment(Async)");
        }

        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling SubsFetchSubscriptionPayment(Async)");
        }

        return subsFetchSubscriptionPaymentCall(xApiVersion, subscriptionId, paymentId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<SubscriptionPaymentEntity> SubsFetchSubscriptionPayment(String xApiVersion, String subscriptionId, String paymentId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = subsFetchSubscriptionPaymentValidateBeforeCall(xApiVersion, subscriptionId, paymentId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<SubscriptionPaymentEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for subsFetchSubscriptionPayments
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param subscriptionId Provide the SubscriptionId using which the subscription was created. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetched all payments of subscription </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call subsFetchSubscriptionPaymentsCall(String xApiVersion, String subscriptionId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscription_id}/payments"
            .replace("{" + "subscription_id" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subsFetchSubscriptionPaymentsValidateBeforeCall(String xApiVersion, String subscriptionId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling SubsFetchSubscriptionPayments(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling SubsFetchSubscriptionPayments(Async)");
        }

        return subsFetchSubscriptionPaymentsCall(xApiVersion, subscriptionId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<List<SubscriptionPaymentEntity>> SubsFetchSubscriptionPayments(String xApiVersion, String subscriptionId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = subsFetchSubscriptionPaymentsValidateBeforeCall(xApiVersion, subscriptionId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<List<SubscriptionPaymentEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for subsFetchSubscriptionRefund
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param subscriptionId Provide the SubscriptionId using which the subscription was created. (required)
     * @param refundId Provide the PaymentId for which the details have to be fetched. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetched Refund Response </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call subsFetchSubscriptionRefundCall(String xApiVersion, String subscriptionId, String refundId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscription_id}/refunds/{refund_id}"
            .replace("{" + "subscription_id" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "refund_id" + "}", localVarApiClient.escapeString(refundId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subsFetchSubscriptionRefundValidateBeforeCall(String xApiVersion, String subscriptionId, String refundId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling SubsFetchSubscriptionRefund(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling SubsFetchSubscriptionRefund(Async)");
        }

        // verify the required parameter 'refundId' is set
        if (refundId == null) {
            throw new ApiException("Missing the required parameter 'refundId' when calling SubsFetchSubscriptionRefund(Async)");
        }

        return subsFetchSubscriptionRefundCall(xApiVersion, subscriptionId, refundId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<SubscriptionPaymentRefundEntity> SubsFetchSubscriptionRefund(String xApiVersion, String subscriptionId, String refundId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = subsFetchSubscriptionRefundValidateBeforeCall(xApiVersion, subscriptionId, refundId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<SubscriptionPaymentRefundEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for subsManageSubscription
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param subscriptionId Provide the SubscriptionId using which the subscription was created. (required)
     * @param manageSubscriptionRequest Request body to manage a subscription. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription Updated </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call subsManageSubscriptionCall(String xApiVersion, String subscriptionId, ManageSubscriptionRequest manageSubscriptionRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = manageSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscription_id}/manage"
            .replace("{" + "subscription_id" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subsManageSubscriptionValidateBeforeCall(String xApiVersion, String subscriptionId, ManageSubscriptionRequest manageSubscriptionRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling SubsManageSubscription(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling SubsManageSubscription(Async)");
        }

        // verify the required parameter 'manageSubscriptionRequest' is set
        if (manageSubscriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'manageSubscriptionRequest' when calling SubsManageSubscription(Async)");
        }

        return subsManageSubscriptionCall(xApiVersion, subscriptionId, manageSubscriptionRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<SubscriptionEntity> SubsManageSubscription(String xApiVersion, String subscriptionId, ManageSubscriptionRequest manageSubscriptionRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = subsManageSubscriptionValidateBeforeCall(xApiVersion, subscriptionId, manageSubscriptionRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<SubscriptionEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for subsManageSubscriptionPayment
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param subscriptionId Provide the SubscriptionId using which the subscription was created. (required)
     * @param paymentId Provide the PaymentId using which the payment was created. (required)
     * @param manageSubscriptionPaymentRequest Request body to manage a subscription payment. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetched Manage Payment Response </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call subsManageSubscriptionPaymentCall(String xApiVersion, String subscriptionId, String paymentId, ManageSubscriptionPaymentRequest manageSubscriptionPaymentRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = manageSubscriptionPaymentRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscription_id}/payments/{payment_id}/manage"
            .replace("{" + "subscription_id" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "payment_id" + "}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subsManageSubscriptionPaymentValidateBeforeCall(String xApiVersion, String subscriptionId, String paymentId, ManageSubscriptionPaymentRequest manageSubscriptionPaymentRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling SubsManageSubscriptionPayment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling SubsManageSubscriptionPayment(Async)");
        }

        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling SubsManageSubscriptionPayment(Async)");
        }

        // verify the required parameter 'manageSubscriptionPaymentRequest' is set
        if (manageSubscriptionPaymentRequest == null) {
            throw new ApiException("Missing the required parameter 'manageSubscriptionPaymentRequest' when calling SubsManageSubscriptionPayment(Async)");
        }

        return subsManageSubscriptionPaymentCall(xApiVersion, subscriptionId, paymentId, manageSubscriptionPaymentRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<SubscriptionPaymentEntity> SubsManageSubscriptionPayment(String xApiVersion, String subscriptionId, String paymentId, ManageSubscriptionPaymentRequest manageSubscriptionPaymentRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = subsManageSubscriptionPaymentValidateBeforeCall(xApiVersion, subscriptionId, paymentId, manageSubscriptionPaymentRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<SubscriptionPaymentEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for subscriptionDocumentUpload
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param paymentId Provide the PaymentId using which the payment was created. (required)
     * @param _file Select the .jpg file that should be uploaded or provide the path of that file. You cannot upload a file that is more than 1MB in size. (required)
     * @param paymentId2 Authorization Payment Id for physical nach authorization (required)
     * @param action Action to be performed on the file. Can be SUBMIT_DOCUMENT (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload Pnach Image 200 response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionDocumentUploadCall(String xApiVersion, String paymentId, File _file, String paymentId2, String action, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/pay/documents/{payment_id}"
            .replace("{" + "payment_id" + "}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (paymentId2 != null) {
            localVarFormParams.put("payment_id", paymentId2);
        }

        if (action != null) {
            localVarFormParams.put("action", action);
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionDocumentUploadValidateBeforeCall(String xApiVersion, String paymentId, File _file, String paymentId2, String action, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling SubscriptionDocumentUpload(Async)");
        }

        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling SubscriptionDocumentUpload(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling SubscriptionDocumentUpload(Async)");
        }

        // verify the required parameter 'paymentId2' is set
        if (paymentId2 == null) {
            throw new ApiException("Missing the required parameter 'paymentId2' when calling SubscriptionDocumentUpload(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling SubscriptionDocumentUpload(Async)");
        }

        return subscriptionDocumentUploadCall(xApiVersion, paymentId, _file, paymentId2, action, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<UploadPnachImageResponse> SubscriptionDocumentUpload(String xApiVersion, String paymentId, File _file, String paymentId2, String action, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = subscriptionDocumentUploadValidateBeforeCall(xApiVersion, paymentId, _file, paymentId2, action, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<UploadPnachImageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for subscriptionEligibility
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param subscriptionEligibilityRequest Request body to fetch subscription eligibile payment method details. (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscrition eligibility API 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionEligibilityCall(String xApiVersion, SubscriptionEligibilityRequest subscriptionEligibilityRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = subscriptionEligibilityRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/eligibility/payment_methods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionEligibilityValidateBeforeCall(String xApiVersion, SubscriptionEligibilityRequest subscriptionEligibilityRequest, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling SubscriptionEligibility(Async)");
        }

        // verify the required parameter 'subscriptionEligibilityRequest' is set
        if (subscriptionEligibilityRequest == null) {
            throw new ApiException("Missing the required parameter 'subscriptionEligibilityRequest' when calling SubscriptionEligibility(Async)");
        }

        return subscriptionEligibilityCall(xApiVersion, subscriptionEligibilityRequest, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<SubscriptionEligibilityResponse> SubscriptionEligibility(String xApiVersion, SubscriptionEligibilityRequest subscriptionEligibilityRequest, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = subscriptionEligibilityValidateBeforeCall(xApiVersion, subscriptionEligibilityRequest, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<SubscriptionEligibilityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGCustomerDeleteInstrument
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param customerId Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60; (required)
     * @param instrumentId The instrument_id which needs to be deleted (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 502 </td><td> Bank related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGCustomerDeleteInstrumentCall(String xApiVersion, String customerId, String instrumentId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{customer_id}/instruments/{instrument_id}"
            .replace("{" + "customer_id" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "instrument_id" + "}", localVarApiClient.escapeString(instrumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGCustomerDeleteInstrumentValidateBeforeCall(String xApiVersion, String customerId, String instrumentId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGCustomerDeleteInstrument(Async)");
        }

        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling PGCustomerDeleteInstrument(Async)");
        }

        // verify the required parameter 'instrumentId' is set
        if (instrumentId == null) {
            throw new ApiException("Missing the required parameter 'instrumentId' when calling PGCustomerDeleteInstrument(Async)");
        }

        return pGCustomerDeleteInstrumentCall(xApiVersion, customerId, instrumentId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<InstrumentEntity> PGCustomerDeleteInstrument(String xApiVersion, String customerId, String instrumentId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGCustomerDeleteInstrumentValidateBeforeCall(xApiVersion, customerId, instrumentId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<InstrumentEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGCustomerFetchInstrument
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param customerId Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60; (required)
     * @param instrumentId The instrument_id of the saved instrument which needs to be queried (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 502 </td><td> Bank related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGCustomerFetchInstrumentCall(String xApiVersion, String customerId, String instrumentId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{customer_id}/instruments/{instrument_id}"
            .replace("{" + "customer_id" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "instrument_id" + "}", localVarApiClient.escapeString(instrumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGCustomerFetchInstrumentValidateBeforeCall(String xApiVersion, String customerId, String instrumentId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGCustomerFetchInstrument(Async)");
        }

        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling PGCustomerFetchInstrument(Async)");
        }

        // verify the required parameter 'instrumentId' is set
        if (instrumentId == null) {
            throw new ApiException("Missing the required parameter 'instrumentId' when calling PGCustomerFetchInstrument(Async)");
        }

        return pGCustomerFetchInstrumentCall(xApiVersion, customerId, instrumentId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<InstrumentEntity> PGCustomerFetchInstrument(String xApiVersion, String customerId, String instrumentId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGCustomerFetchInstrumentValidateBeforeCall(xApiVersion, customerId, instrumentId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<InstrumentEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGCustomerFetchInstruments
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param customerId Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60; (required)
     * @param instrumentType Payment mode or type of saved instrument  (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGCustomerFetchInstrumentsCall(String xApiVersion, String customerId, String instrumentType, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{customer_id}/instruments"
            .replace("{" + "customer_id" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (instrumentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instrument_type", instrumentType));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGCustomerFetchInstrumentsValidateBeforeCall(String xApiVersion, String customerId, String instrumentType, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGCustomerFetchInstruments(Async)");
        }

        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling PGCustomerFetchInstruments(Async)");
        }

        // verify the required parameter 'instrumentType' is set
        if (instrumentType == null) {
            throw new ApiException("Missing the required parameter 'instrumentType' when calling PGCustomerFetchInstruments(Async)");
        }

        return pGCustomerFetchInstrumentsCall(xApiVersion, customerId, instrumentType, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<List<InstrumentEntity>> PGCustomerFetchInstruments(String xApiVersion, String customerId, String instrumentType, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGCustomerFetchInstrumentsValidateBeforeCall(xApiVersion, customerId, instrumentType, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<List<InstrumentEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for pGCustomerInstrumentsFetchCryptogram
     * @param xApiVersion API version to be used. Format is in YYYY-MM-DD (required)
     * @param customerId Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60; (required)
     * @param instrumentId The instrument_id of the saved card instrument which needs to be queried (required)
     * @param xRequestId Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)
     * @param xIdempotencyKey An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource Not found </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 409 </td><td> Resource already present </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 422 </td><td> Idempotency error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limit Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 500 </td><td> API related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
        <tr><td> 502 </td><td> Bank related Error </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  * x-idempotency-key -  <br>  * x-idempotency-replayed -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call pGCustomerInstrumentsFetchCryptogramCall(String xApiVersion, String customerId, String instrumentId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/pg";

        if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/pg";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{customer_id}/instruments/{instrument_id}/cryptogram"
            .replace("{" + "customer_id" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "instrument_id" + "}", localVarApiClient.escapeString(instrumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }


        if(Cashfree.XClientSecret != null && !Cashfree.XClientSecret.isEmpty()) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(Cashfree.XClientSecret);
        }

        if(Cashfree.XClientId != null && !Cashfree.XClientId.isEmpty()) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(Cashfree.XClientId);
        }

        if(Cashfree.XClientSignature != null && !Cashfree.XClientSignature.isEmpty()) {
            ApiKeyAuth XClientSignature = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSignatureHeader");
            XClientSignature.setApiKey(Cashfree.XClientSignature);
        }

        if(Cashfree.XPartnerAPIKey != null && !Cashfree.XPartnerAPIKey.isEmpty()) {
            ApiKeyAuth XPartnerAPIKey = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerAPIKey");
            XPartnerAPIKey.setApiKey(Cashfree.XPartnerAPIKey);
        }

        if(Cashfree.XPartnerMerchantID != null && !Cashfree.XPartnerMerchantID.isEmpty()) {
            ApiKeyAuth XPartnerMerchantID = (ApiKeyAuth) localVarApiClient.getAuthentication("XPartnerMerchantID");
            XPartnerMerchantID.setApiKey(Cashfree.XPartnerMerchantID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-4.3.8");

        String[] localVarAuthNames = new String[] { "XPartnerAPIKey", "XClientSecret", "XPartnerMerchantID", "XClientID", "XClientSignatureHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pGCustomerInstrumentsFetchCryptogramValidateBeforeCall(String xApiVersion, String customerId, String instrumentId, String xRequestId, UUID xIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling PGCustomerInstrumentsFetchCryptogram(Async)");
        }

        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling PGCustomerInstrumentsFetchCryptogram(Async)");
        }

        // verify the required parameter 'instrumentId' is set
        if (instrumentId == null) {
            throw new ApiException("Missing the required parameter 'instrumentId' when calling PGCustomerInstrumentsFetchCryptogram(Async)");
        }

        return pGCustomerInstrumentsFetchCryptogramCall(xApiVersion, customerId, instrumentId, xRequestId, xIdempotencyKey, _callback);

    }

    public ApiResponse<CryptogramEntity> PGCustomerInstrumentsFetchCryptogram(String xApiVersion, String customerId, String instrumentId, String xRequestId, UUID xIdempotencyKey, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = pGCustomerInstrumentsFetchCryptogramValidateBeforeCall(xApiVersion, customerId, instrumentId, xRequestId, xIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<CryptogramEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }



    /**
 * <p>ApiClient class.</p>
 */
static class ApiClient {

    private String basePath = "https://sandbox.cashfree.com/pg";
    protected List<ServerConfiguration> servers = new ArrayList<ServerConfiguration>(Arrays.asList(
    new ServerConfiguration(
      "https://sandbox.cashfree.com/pg",
      "Sandbox server",
      new HashMap<String, ServerVariable>()
    ),
    new ServerConfiguration(
      "https://api.cashfree.com/pg",
      "Production server",
      new HashMap<String, ServerVariable>()
    )
  ));
    protected Integer serverIndex = 0;
    protected Map<String, String> serverVariables = null;
    private boolean debugging = false;
    private Map<String, String> defaultHeaderMap = new HashMap<String, String>();
    private Map<String, String> defaultCookieMap = new HashMap<String, String>();
    private String tempFolderPath = null;

    private Map<String, Authentication> authentications;

    private DateFormat dateFormat;
    private DateFormat datetimeFormat;
    private boolean lenientDatetimeFormat;
    private int dateLength;

    private InputStream sslCaCert;
    private boolean verifyingSsl;
    private KeyManager[] keyManagers;

    private OkHttpClient httpClient;
    private JSON json;

    private HttpLoggingInterceptor loggingInterceptor;

    /**
     * Basic constructor for ApiClient
     */
    public ApiClient() {
        init();
        initHttpClient();

        // Setup authentications (key: authentication name, value: authentication).
        authentications.put("XClientID", new ApiKeyAuth("header", "x-client-id"));
        authentications.put("XClientSecret", new ApiKeyAuth("header", "x-client-secret"));
        authentications.put("XClientSignatureHeader", new ApiKeyAuth("header", "x-client-signature"));
        authentications.put("XPartnerAPIKey", new ApiKeyAuth("header", "x-partner-apikey"));
        authentications.put("XPartnerMerchantID", new ApiKeyAuth("header", "x-partner-merchantid"));
        // Prevent the authentications from being modified.
        authentications = Collections.unmodifiableMap(authentications);
    }

    /**
     * Basic constructor with custom OkHttpClient
     *
     * @param client a {@link okhttp3.OkHttpClient} object
     */
    public ApiClient(OkHttpClient client) {
        init();

        httpClient = client;

        // Setup authentications (key: authentication name, value: authentication).
        authentications.put("XClientID", new ApiKeyAuth("header", "x-client-id"));
        authentications.put("XClientSecret", new ApiKeyAuth("header", "x-client-secret"));
        authentications.put("XClientSignatureHeader", new ApiKeyAuth("header", "x-client-signature"));
        authentications.put("XPartnerAPIKey", new ApiKeyAuth("header", "x-partner-apikey"));
        authentications.put("XPartnerMerchantID", new ApiKeyAuth("header", "x-partner-merchantid"));
        // Prevent the authentications from being modified.
        authentications = Collections.unmodifiableMap(authentications);
    }

    private void initHttpClient() {
        initHttpClient(Collections.<Interceptor>emptyList());
    }

    private void initHttpClient(List<Interceptor> interceptors) {
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        builder.addNetworkInterceptor(getProgressInterceptor());
        for (Interceptor interceptor: interceptors) {
            builder.addInterceptor(interceptor);
        }

        httpClient = builder.build();
    }

    private void init() {
        verifyingSsl = true;

        json = new JSON();

        // Set default User-Agent.
        setUserAgent("OpenAPI-Generator/4.3.8/java");

        authentications = new HashMap<String, Authentication>();
    }

    /**
     * Get base path
     *
     * @return Base path
     */
    public String getBasePath() {
        return basePath;
    }

    /**
     * Set base path
     *
     * @param basePath Base path of the URL (e.g https://sandbox.cashfree.com/pg
     * @return An instance of OkHttpClient
     */
    public ApiClient setBasePath(String basePath) {
        this.basePath = basePath;
        this.serverIndex = null;
        return this;
    }

    public List<ServerConfiguration> getServers() {
        return servers;
    }

    public ApiClient setServers(List<ServerConfiguration> servers) {
        this.servers = servers;
        return this;
    }

    public Integer getServerIndex() {
        return serverIndex;
    }

    public ApiClient setServerIndex(Integer serverIndex) {
        this.serverIndex = serverIndex;
        return this;
    }

    public Map<String, String> getServerVariables() {
        return serverVariables;
    }

    public ApiClient setServerVariables(Map<String, String> serverVariables) {
        this.serverVariables = serverVariables;
        return this;
    }

    /**
     * Get HTTP client
     *
     * @return An instance of OkHttpClient
     */
    public OkHttpClient getHttpClient() {
        return httpClient;
    }

    /**
     * Set HTTP client, which must never be null.
     *
     * @param newHttpClient An instance of OkHttpClient
     * @return Api Client
     * @throws java.lang.NullPointerException when newHttpClient is null
     */
    public ApiClient setHttpClient(OkHttpClient newHttpClient) {
        this.httpClient = Objects.requireNonNull(newHttpClient, "HttpClient must not be null!");
        return this;
    }

    /**
     * Get JSON
     *
     * @return JSON object
     */
    public JSON getJSON() {
        return json;
    }

    /**
     * Set JSON
     *
     * @param json JSON object
     * @return Api client
     */
    public ApiClient setJSON(JSON json) {
        this.json = json;
        return this;
    }

    /**
     * True if isVerifyingSsl flag is on
     *
     * @return True if isVerifySsl flag is on
     */
    public boolean isVerifyingSsl() {
        return verifyingSsl;
    }

    /**
     * Configure whether to verify certificate and hostname when making https requests.
     * Default to true.
     * NOTE: Do NOT set to false in production code, otherwise you would face multiple types of cryptographic attacks.
     *
     * @param verifyingSsl True to verify TLS/SSL connection
     * @return ApiClient
     */
    public ApiClient setVerifyingSsl(boolean verifyingSsl) {
        this.verifyingSsl = verifyingSsl;
        applySslSettings();
        return this;
    }

    /**
     * Get SSL CA cert.
     *
     * @return Input stream to the SSL CA cert
     */
    public InputStream getSslCaCert() {
        return sslCaCert;
    }

    /**
     * Configure the CA certificate to be trusted when making https requests.
     * Use null to reset to default.
     *
     * @param sslCaCert input stream for SSL CA cert
     * @return ApiClient
     */
    public ApiClient setSslCaCert(InputStream sslCaCert) {
        this.sslCaCert = sslCaCert;
        applySslSettings();
        return this;
    }

    /**
     * <p>Getter for the field <code>keyManagers</code>.</p>
     *
     * @return an array of {@link javax.net.ssl.KeyManager} objects
     */
    public KeyManager[] getKeyManagers() {
        return keyManagers;
    }

    /**
     * Configure client keys to use for authorization in an SSL session.
     * Use null to reset to default.
     *
     * @param managers The KeyManagers to use
     * @return ApiClient
     */
    public ApiClient setKeyManagers(KeyManager[] managers) {
        this.keyManagers = managers;
        applySslSettings();
        return this;
    }

    /**
     * <p>Getter for the field <code>dateFormat</code>.</p>
     *
     * @return a {@link java.text.DateFormat} object
     */
    public DateFormat getDateFormat() {
        return dateFormat;
    }

    /**
     * <p>Setter for the field <code>dateFormat</code>.</p>
     *
     * @param dateFormat a {@link java.text.DateFormat} object
     * @return a {@link com.cashfree.ApiClient} object
     */
    public ApiClient setDateFormat(DateFormat dateFormat) {
        JSON.setDateFormat(dateFormat);
        return this;
    }

    /**
     * <p>Set SqlDateFormat.</p>
     *
     * @param dateFormat a {@link java.text.DateFormat} object
     * @return a {@link com.cashfree.ApiClient} object
     */
    public ApiClient setSqlDateFormat(DateFormat dateFormat) {
        JSON.setSqlDateFormat(dateFormat);
        return this;
    }

    /**
     * <p>Set OffsetDateTimeFormat.</p>
     *
     * @param dateFormat a {@link java.time.format.DateTimeFormatter} object
     * @return a {@link com.cashfree.ApiClient} object
     */
    public ApiClient setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        JSON.setOffsetDateTimeFormat(dateFormat);
        return this;
    }

    /**
     * <p>Set LocalDateFormat.</p>
     *
     * @param dateFormat a {@link java.time.format.DateTimeFormatter} object
     * @return a {@link com.cashfree.ApiClient} object
     */
    public ApiClient setLocalDateFormat(DateTimeFormatter dateFormat) {
        JSON.setLocalDateFormat(dateFormat);
        return this;
    }

    /**
     * <p>Set LenientOnJson.</p>
     *
     * @param lenientOnJson a boolean
     * @return a {@link com.cashfree.ApiClient} object
     */
    public ApiClient setLenientOnJson(boolean lenientOnJson) {
        JSON.setLenientOnJson(lenientOnJson);
        return this;
    }

    /**
     * Get authentications (key: authentication name, value: authentication).
     *
     * @return Map of authentication objects
     */
    public Map<String, Authentication> getAuthentications() {
        return authentications;
    }

    /**
     * Get authentication for the given name.
     *
     * @param authName The authentication name
     * @return The authentication, null if not found
     */
    public Authentication getAuthentication(String authName) {
        return authentications.get(authName);
    }


    /**
     * Helper method to set username for the first HTTP basic authentication.
     *
     * @param username Username
     */
    public void setUsername(String username) {
        for (Authentication auth : authentications.values()) {
            if (auth instanceof HttpBasicAuth) {
                ((HttpBasicAuth) auth).setUsername(username);
                return;
            }
        }
        throw new RuntimeException("No HTTP basic authentication configured!");
    }

    /**
     * Helper method to set password for the first HTTP basic authentication.
     *
     * @param password Password
     */
    public void setPassword(String password) {
        for (Authentication auth : authentications.values()) {
            if (auth instanceof HttpBasicAuth) {
                ((HttpBasicAuth) auth).setPassword(password);
                return;
            }
        }
        throw new RuntimeException("No HTTP basic authentication configured!");
    }

    /**
     * Helper method to set API key value for the first API key authentication.
     *
     * @param apiKey API key
     */
    public void setApiKey(String apiKey) {
        for (Authentication auth : authentications.values()) {
            if (auth instanceof ApiKeyAuth) {
                ((ApiKeyAuth) auth).setApiKey(apiKey);
                return;
            }
        }
        throw new RuntimeException("No API key authentication configured!");
    }

    /**
     * Helper method to set API key prefix for the first API key authentication.
     *
     * @param apiKeyPrefix API key prefix
     */
    public void setApiKeyPrefix(String apiKeyPrefix) {
        for (Authentication auth : authentications.values()) {
            if (auth instanceof ApiKeyAuth) {
                ((ApiKeyAuth) auth).setApiKeyPrefix(apiKeyPrefix);
                return;
            }
        }
        throw new RuntimeException("No API key authentication configured!");
    }

    /**
     * Helper method to set access token for the first OAuth2 authentication.
     *
     * @param accessToken Access token
     */
    public void setAccessToken(String accessToken) {
        throw new RuntimeException("No OAuth2 authentication configured!");
    }

    /**
     * Helper method to set credentials for AWSV4 Signature
     *
     * @param accessKey Access Key
     * @param secretKey Secret Key
     * @param region Region
     * @param service Service to access to
     */
    public void setAWS4Configuration(String accessKey, String secretKey, String region, String service) {
        throw new RuntimeException("No AWS4 authentication configured!");
    }

    /**
     * Set the User-Agent header's value (by adding to the default header map).
     *
     * @param userAgent HTTP request's user agent
     * @return ApiClient
     */
    public ApiClient setUserAgent(String userAgent) {
        addDefaultHeader("User-Agent", userAgent);
        return this;
    }

    /**
     * Add a default header.
     *
     * @param key The header's key
     * @param value The header's value
     * @return ApiClient
     */
    public ApiClient addDefaultHeader(String key, String value) {
        defaultHeaderMap.put(key, value);
        return this;
    }

    /**
     * Add a default cookie.
     *
     * @param key The cookie's key
     * @param value The cookie's value
     * @return ApiClient
     */
    public ApiClient addDefaultCookie(String key, String value) {
        defaultCookieMap.put(key, value);
        return this;
    }

    /**
     * Check that whether debugging is enabled for this API client.
     *
     * @return True if debugging is enabled, false otherwise.
     */
    public boolean isDebugging() {
        return debugging;
    }

    /**
     * Enable/disable debugging for this API client.
     *
     * @param debugging To enable (true) or disable (false) debugging
     * @return ApiClient
     */
    public ApiClient setDebugging(boolean debugging) {
        if (debugging != this.debugging) {
            if (debugging) {
                loggingInterceptor = new HttpLoggingInterceptor();
                loggingInterceptor.setLevel(Level.BODY);
                httpClient = httpClient.newBuilder().addInterceptor(loggingInterceptor).build();
            } else {
                final OkHttpClient.Builder builder = httpClient.newBuilder();
                builder.interceptors().remove(loggingInterceptor);
                httpClient = builder.build();
                loggingInterceptor = null;
            }
        }
        this.debugging = debugging;
        return this;
    }

    /**
     * The path of temporary folder used to store downloaded files from endpoints
     * with file response. The default value is <code>null</code>, i.e. using
     * the system's default temporary folder.
     *
     * @see <a href="https://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#createTempFile(java.lang.String,%20java.lang.String,%20java.nio.file.attribute.FileAttribute...)">createTempFile</a>
     * @return Temporary folder path
     */
    public String getTempFolderPath() {
        return tempFolderPath;
    }

    /**
     * Set the temporary folder path (for downloading files)
     *
     * @param tempFolderPath Temporary folder path
     * @return ApiClient
     */
    public ApiClient setTempFolderPath(String tempFolderPath) {
        this.tempFolderPath = tempFolderPath;
        return this;
    }

    /**
     * Get connection timeout (in milliseconds).
     *
     * @return Timeout in milliseconds
     */
    public int getConnectTimeout() {
        return httpClient.connectTimeoutMillis();
    }

    /**
     * Sets the connect timeout (in milliseconds).
     * A value of 0 means no timeout, otherwise values must be between 1 and
     * {@link java.lang.Integer#MAX_VALUE}.
     *
     * @param connectionTimeout connection timeout in milliseconds
     * @return Api client
     */
    public ApiClient setConnectTimeout(int connectionTimeout) {
        httpClient = httpClient.newBuilder().connectTimeout(connectionTimeout, TimeUnit.MILLISECONDS).build();
        return this;
    }

    /**
     * Get read timeout (in milliseconds).
     *
     * @return Timeout in milliseconds
     */
    public int getReadTimeout() {
        return httpClient.readTimeoutMillis();
    }

    /**
     * Sets the read timeout (in milliseconds).
     * A value of 0 means no timeout, otherwise values must be between 1 and
     * {@link java.lang.Integer#MAX_VALUE}.
     *
     * @param readTimeout read timeout in milliseconds
     * @return Api client
     */
    public ApiClient setReadTimeout(int readTimeout) {
        httpClient = httpClient.newBuilder().readTimeout(readTimeout, TimeUnit.MILLISECONDS).build();
        return this;
    }

    /**
     * Get write timeout (in milliseconds).
     *
     * @return Timeout in milliseconds
     */
    public int getWriteTimeout() {
        return httpClient.writeTimeoutMillis();
    }

    /**
     * Sets the write timeout (in milliseconds).
     * A value of 0 means no timeout, otherwise values must be between 1 and
     * {@link java.lang.Integer#MAX_VALUE}.
     *
     * @param writeTimeout connection timeout in milliseconds
     * @return Api client
     */
    public ApiClient setWriteTimeout(int writeTimeout) {
        httpClient = httpClient.newBuilder().writeTimeout(writeTimeout, TimeUnit.MILLISECONDS).build();
        return this;
    }


    /**
     * Format the given parameter object into string.
     *
     * @param param Parameter
     * @return String representation of the parameter
     */
    public String parameterToString(Object param) {
        if (param == null) {
            return "";
        } else if (param instanceof Date || param instanceof OffsetDateTime || param instanceof LocalDate) {
            //Serialize to json string and remove the " enclosing characters
            String jsonStr = JSON.serialize(param);
            return jsonStr.substring(1, jsonStr.length() - 1);
        } else if (param instanceof Collection) {
            StringBuilder b = new StringBuilder();
            for (Object o : (Collection) param) {
                if (b.length() > 0) {
                    b.append(",");
                }
                b.append(o);
            }
            return b.toString();
        } else {
            return String.valueOf(param);
        }
    }

    /**
     * Formats the specified query parameter to a list containing a single {@code Pair} object.
     *
     * Note that {@code value} must not be a collection.
     *
     * @param name The name of the parameter.
     * @param value The value of the parameter.
     * @return A list containing a single {@code Pair} object.
     */
    public List<Pair> parameterToPair(String name, Object value) {
        List<Pair> params = new ArrayList<Pair>();

        // preconditions
        if (name == null || name.isEmpty() || value == null || value instanceof Collection) {
            return params;
        }

        params.add(new Pair(name, parameterToString(value)));
        return params;
    }

    /**
     * Formats the specified collection query parameters to a list of {@code Pair} objects.
     *
     * Note that the values of each of the returned Pair objects are percent-encoded.
     *
     * @param collectionFormat The collection format of the parameter.
     * @param name The name of the parameter.
     * @param value The value of the parameter.
     * @return A list of {@code Pair} objects.
     */
    public List<Pair> parameterToPairs(String collectionFormat, String name, Collection value) {
        List<Pair> params = new ArrayList<Pair>();

        // preconditions
        if (name == null || name.isEmpty() || value == null || value.isEmpty()) {
            return params;
        }

        // create the params based on the collection format
        if ("multi".equals(collectionFormat)) {
            for (Object item : value) {
                params.add(new Pair(name, escapeString(parameterToString(item))));
            }
            return params;
        }

        // collectionFormat is assumed to be "csv" by default
        String delimiter = ",";

        // escape all delimiters except commas, which are URI reserved
        // characters
        if ("ssv".equals(collectionFormat)) {
            delimiter = escapeString(" ");
        } else if ("tsv".equals(collectionFormat)) {
            delimiter = escapeString("\t");
        } else if ("pipes".equals(collectionFormat)) {
            delimiter = escapeString("|");
        }

        StringBuilder sb = new StringBuilder();
        for (Object item : value) {
            sb.append(delimiter);
            sb.append(escapeString(parameterToString(item)));
        }

        params.add(new Pair(name, sb.substring(delimiter.length())));

        return params;
    }

    /**
     * Formats the specified collection path parameter to a string value.
     *
     * @param collectionFormat The collection format of the parameter.
     * @param value The value of the parameter.
     * @return String representation of the parameter
     */
    public String collectionPathParameterToString(String collectionFormat, Collection value) {
        // create the value based on the collection format
        if ("multi".equals(collectionFormat)) {
            // not valid for path params
            return parameterToString(value);
        }

        // collectionFormat is assumed to be "csv" by default
        String delimiter = ",";

        if ("ssv".equals(collectionFormat)) {
            delimiter = " ";
        } else if ("tsv".equals(collectionFormat)) {
            delimiter = "\t";
        } else if ("pipes".equals(collectionFormat)) {
            delimiter = "|";
        }

        StringBuilder sb = new StringBuilder() ;
        for (Object item : value) {
            sb.append(delimiter);
            sb.append(parameterToString(item));
        }

        return sb.substring(delimiter.length());
    }

    /**
     * Sanitize filename by removing path.
     * e.g. ../../sun.gif becomes sun.gif
     *
     * @param filename The filename to be sanitized
     * @return The sanitized filename
     */
    public String sanitizeFilename(String filename) {
        return filename.replaceAll(".*[/\\\\]", "");
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * "* / *" is also default to JSON
     * @param mime MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public boolean isJsonMime(String mime) {
        String jsonMime = "(?i)^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$";
        return mime != null && (mime.matches(jsonMime) || mime.equals("*/*"));
    }

    /**
     * Select the Accept header's value from the given accepts array:
     *   if JSON exists in the given array, use it;
     *   otherwise use all of them (joining into a string)
     *
     * @param accepts The accepts array to select from
     * @return The Accept header to use. If the given array is empty,
     *   null will be returned (not to set the Accept header explicitly).
     */
    public String selectHeaderAccept(String[] accepts) {
        if (accepts.length == 0) {
            return null;
        }
        for (String accept : accepts) {
            if (isJsonMime(accept)) {
                return accept;
            }
        }
        return StringUtil.join(accepts, ",");
    }

    /**
     * Select the Content-Type header's value from the given array:
     *   if JSON exists in the given array, use it;
     *   otherwise use the first one of the array.
     *
     * @param contentTypes The Content-Type array to select from
     * @return The Content-Type header to use. If the given array is empty,
     *   returns null. If it matches "any", JSON will be used.
     */
    public String selectHeaderContentType(String[] contentTypes) {
        if (contentTypes.length == 0) {
            return null;
        }

        if (contentTypes[0].equals("*/*")) {
            return "application/json";
        }

        for (String contentType : contentTypes) {
            if (isJsonMime(contentType)) {
                return contentType;
            }
        }

        return contentTypes[0];
    }

    /**
     * Escape the given string to be used as URL query value.
     *
     * @param str String to be escaped
     * @return Escaped string
     */
    public String escapeString(String str) {
        try {
            return URLEncoder.encode(str, "utf8").replaceAll("\\+", "%20");
        } catch (UnsupportedEncodingException e) {
            return str;
        }
    }

    /**
     * Deserialize response body to Java object, according to the return type and
     * the Content-Type response header.
     *
     * @param <T> Type
     * @param response HTTP response
     * @param returnType The type of the Java object
     * @return The deserialized Java object
     * @throws com.cashfree.ApiException If fail to deserialize response body, i.e. cannot read response body
     *   or the Content-Type of the response is not supported.
     */
    @SuppressWarnings("unchecked")
    public <T> T deserialize(Response response, Type returnType) throws ApiException {
        if (response == null || returnType == null) {
            return null;
        }

        if ("byte[]".equals(returnType.toString())) {
            // Handle binary response (byte array).
            try {
                return (T) response.body().bytes();
            } catch (IOException e) {
                throw new ApiException(e);
            }
        } else if (returnType.equals(File.class)) {
            // Handle file downloading.
            return (T) downloadFileFromResponse(response);
        }

        String respBody;
        try {
            if (response.body() != null)
                respBody = response.body().string();
            else
                respBody = null;
        } catch (IOException e) {
            throw new ApiException(e);
        }

        if (respBody == null || "".equals(respBody)) {
            return null;
        }

        String contentType = response.headers().get("Content-Type");
        if (contentType == null) {
            // ensuring a default content type
            contentType = "application/json";
        }
        if (isJsonMime(contentType)) {
            return JSON.deserialize(respBody, returnType);
        } else if (returnType.equals(String.class)) {
            // Expecting string, return the raw response body.
            return (T) respBody;
        } else {
            throw new ApiException(
                    "Content type \"" + contentType + "\" is not supported for type: " + returnType,
                    response.code(),
                    response.headers().toMultimap(),
                    respBody);
        }
    }

    /**
     * Serialize the given Java object into request body according to the object's
     * class and the request Content-Type.
     *
     * @param obj The Java object
     * @param contentType The request Content-Type
     * @return The serialized request body
     * @throws com.cashfree.ApiException If fail to serialize the given object
     */
    public RequestBody serialize(Object obj, String contentType) throws ApiException {
        if (obj instanceof byte[]) {
            // Binary (byte array) body parameter support.
            return RequestBody.create((byte[]) obj, MediaType.parse(contentType));
        } else if (obj instanceof File) {
            // File body parameter support.
            return RequestBody.create((File) obj, MediaType.parse(contentType));
        } else if ("text/plain".equals(contentType) && obj instanceof String) {
            return RequestBody.create((String) obj, MediaType.parse(contentType));
        } else if (isJsonMime(contentType)) {
            String content;
            if (obj != null) {
                content = JSON.serialize(obj);
            } else {
                content = null;
            }
            return RequestBody.create(content, MediaType.parse(contentType));
        } else if (obj instanceof String) {
            return RequestBody.create((String) obj, MediaType.parse(contentType));
        } else {
            throw new ApiException("Content type \"" + contentType + "\" is not supported");
        }
    }

    /**
     * Download file from the given response.
     *
     * @param response An instance of the Response object
     * @throws com.cashfree.ApiException If fail to read file content from response and write to disk
     * @return Downloaded file
     */
    public File downloadFileFromResponse(Response response) throws ApiException {
        try {
            File file = prepareDownloadFile(response);
            BufferedSink sink = Okio.buffer(Okio.sink(file));
            sink.writeAll(response.body().source());
            sink.close();
            return file;
        } catch (IOException e) {
            throw new ApiException(e);
        }
    }

    /**
     * Prepare file for download
     *
     * @param response An instance of the Response object
     * @return Prepared file for the download
     * @throws java.io.IOException If fail to prepare file for download
     */
    public File prepareDownloadFile(Response response) throws IOException {
        String filename = null;
        String contentDisposition = response.header("Content-Disposition");
        if (contentDisposition != null && !"".equals(contentDisposition)) {
            // Get filename from the Content-Disposition header.
            Pattern pattern = Pattern.compile("filename=['\"]?([^'\"\\s]+)['\"]?");
            Matcher matcher = pattern.matcher(contentDisposition);
            if (matcher.find()) {
                filename = sanitizeFilename(matcher.group(1));
            }
        }

        String prefix = null;
        String suffix = null;
        if (filename == null) {
            prefix = "download-";
            suffix = "";
        } else {
            int pos = filename.lastIndexOf(".");
            if (pos == -1) {
                prefix = filename + "-";
            } else {
                prefix = filename.substring(0, pos) + "-";
                suffix = filename.substring(pos);
            }
            // Files.createTempFile requires the prefix to be at least three characters long
            if (prefix.length() < 3)
                prefix = "download-";
        }

        if (tempFolderPath == null)
            return Files.createTempFile(prefix, suffix).toFile();
        else
            return Files.createTempFile(Paths.get(tempFolderPath), prefix, suffix).toFile();
    }

    /**
     * {@link #execute(Call, Type)}
     *
     * @param <T> Type
     * @param call An instance of the Call object
     * @return ApiResponse&lt;T&gt;
     * @throws com.cashfree.ApiException If fail to execute the call
     */
    public <T> ApiResponse<T> execute(Call call) throws ApiException {
        return execute(call, null);
    }

    /**
     * Execute HTTP call and deserialize the HTTP response body into the given return type.
     *
     * @param returnType The return type used to deserialize HTTP response body
     * @param <T> The return type corresponding to (same with) returnType
     * @param call Call
     * @return ApiResponse object containing response status, headers and
     *   data, which is a Java object deserialized from response body and would be null
     *   when returnType is null.
     * @throws com.cashfree.ApiException If fail to execute the call
     */
    public <T> ApiResponse<T> execute(Call call, Type returnType) throws ApiException {
        try {
            Response response = call.execute();
            T data = handleResponse(response, returnType);
            return new ApiResponse<T>(response.code(), response.headers().toMultimap(), data);
        } catch (IOException e) {
            throw new ApiException(e);
        }
    }

    /**
     * {@link #executeAsync(Call, Type, ApiCallback)}
     *
     * @param <T> Type
     * @param call An instance of the Call object
     * @param callback ApiCallback&lt;T&gt;
     */
    public <T> void executeAsync(Call call, ApiCallback<T> callback) {
        executeAsync(call, null, callback);
    }

    /**
     * Execute HTTP call asynchronously.
     *
     * @param <T> Type
     * @param call The callback to be executed when the API call finishes
     * @param returnType Return type
     * @param callback ApiCallback
     * @see #execute(Call, Type)
     */
    @SuppressWarnings("unchecked")
    public <T> void executeAsync(Call call, final Type returnType, final ApiCallback<T> callback) {
        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                callback.onFailure(new ApiException(e), 0, null);
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                T result;
                try {
                    result = (T) handleResponse(response, returnType);
                } catch (ApiException e) {
                    callback.onFailure(e, response.code(), response.headers().toMultimap());
                    return;
                } catch (Exception e) {
                    callback.onFailure(new ApiException(e), response.code(), response.headers().toMultimap());
                    return;
                }
                callback.onSuccess(result, response.code(), response.headers().toMultimap());
            }
        });
    }

    /**
     * Handle the given response, return the deserialized object when the response is successful.
     *
     * @param <T> Type
     * @param response Response
     * @param returnType Return type
     * @return Type
     * @throws com.cashfree.ApiException If the response has an unsuccessful status code or
     *                      fail to deserialize the response body
     */
    public <T> T handleResponse(Response response, Type returnType) throws ApiException {
        if (response.isSuccessful()) {
            if (returnType == null || response.code() == 204) {
                // returning null if the returnType is not defined,
                // or the status code is 204 (No Content)
                if (response.body() != null) {
                    try {
                        response.body().close();
                    } catch (Exception e) {
                        throw new ApiException(response.message(), e, response.code(), response.headers().toMultimap());
                    }
                }
                return null;
            } else {
                return deserialize(response, returnType);
            }
        } else {
            String respBody = null;
            if (response.body() != null) {
                try {
                    respBody = response.body().string();
                } catch (IOException e) {
                    throw new ApiException(response.message(), e, response.code(), response.headers().toMultimap());
                }
            }
            throw new ApiException(response.message(), response.code(), response.headers().toMultimap(), respBody);
        }
    }

    /**
     * Build HTTP call with the given options.
     *
     * @param baseUrl The base URL
     * @param path The sub-path of the HTTP URL
     * @param method The request method, one of "GET", "HEAD", "OPTIONS", "POST", "PUT", "PATCH" and "DELETE"
     * @param queryParams The query parameters
     * @param collectionQueryParams The collection query parameters
     * @param body The request body object
     * @param headerParams The header parameters
     * @param cookieParams The cookie parameters
     * @param formParams The form parameters
     * @param authNames The authentications to apply
     * @param callback Callback for upload/download progress
     * @return The HTTP call
     * @throws com.cashfree.ApiException If fail to serialize the request body object
     */
    public Call buildCall(String baseUrl, String path, String method, List<Pair> queryParams, List<Pair> collectionQueryParams, Object body, Map<String, String> headerParams, Map<String, String> cookieParams, Map<String, Object> formParams, String[] authNames, ApiCallback callback) throws ApiException {
        Request request = buildRequest(baseUrl, path, method, queryParams, collectionQueryParams, body, headerParams, cookieParams, formParams, authNames, callback);

        return httpClient.newCall(request);
    }

    /**
     * Build an HTTP request with the given options.
     *
     * @param baseUrl The base URL
     * @param path The sub-path of the HTTP URL
     * @param method The request method, one of "GET", "HEAD", "OPTIONS", "POST", "PUT", "PATCH" and "DELETE"
     * @param queryParams The query parameters
     * @param collectionQueryParams The collection query parameters
     * @param body The request body object
     * @param headerParams The header parameters
     * @param cookieParams The cookie parameters
     * @param formParams The form parameters
     * @param authNames The authentications to apply
     * @param callback Callback for upload/download progress
     * @return The HTTP request
     * @throws com.cashfree.ApiException If fail to serialize the request body object
     */
    public Request buildRequest(String baseUrl, String path, String method, List<Pair> queryParams, List<Pair> collectionQueryParams, Object body, Map<String, String> headerParams, Map<String, String> cookieParams, Map<String, Object> formParams, String[] authNames, ApiCallback callback) throws ApiException {
        // aggregate queryParams (non-collection) and collectionQueryParams into allQueryParams
        List<Pair> allQueryParams = new ArrayList<Pair>(queryParams);
        allQueryParams.addAll(collectionQueryParams);

        final String url = buildUrl(baseUrl, path, queryParams, collectionQueryParams);

        // prepare HTTP request body
        RequestBody reqBody;
        String contentType = headerParams.get("Content-Type");
        String contentTypePure = contentType;
        if (contentTypePure != null && contentTypePure.contains(";")) {
            contentTypePure = contentType.substring(0, contentType.indexOf(";"));
        }
        if (!HttpMethod.permitsRequestBody(method)) {
            reqBody = null;
        } else if ("application/x-www-form-urlencoded".equals(contentTypePure)) {
            reqBody = buildRequestBodyFormEncoding(formParams);
        } else if ("multipart/form-data".equals(contentTypePure)) {
            reqBody = buildRequestBodyMultipart(formParams);
        } else if (body == null) {
            if ("DELETE".equals(method)) {
                // allow calling DELETE without sending a request body
                reqBody = null;
            } else {
                // use an empty request body (for POST, PUT and PATCH)
                reqBody = RequestBody.create("", contentType == null ? null : MediaType.parse(contentType));
            }
        } else {
            reqBody = serialize(body, contentType);
        }

        // update parameters with authentication settings
        updateParamsForAuth(authNames, allQueryParams, headerParams, cookieParams, requestBodyToString(reqBody), method, URI.create(url));

        final Request.Builder reqBuilder = new Request.Builder().url(url);
        processHeaderParams(headerParams, reqBuilder);
        processCookieParams(cookieParams, reqBuilder);

        // Associate callback with request (if not null) so interceptor can
        // access it when creating ProgressResponseBody
        reqBuilder.tag(callback);

        Request request = null;

        if (callback != null && reqBody != null) {
            ProgressRequestBody progressRequestBody = new ProgressRequestBody(reqBody, callback);
            request = reqBuilder.method(method, progressRequestBody).build();
        } else {
            request = reqBuilder.method(method, reqBody).build();
        }

        return request;
    }

    /**
     * Build full URL by concatenating base path, the given sub path and query parameters.
     *
     * @param baseUrl The base URL
     * @param path The sub path
     * @param queryParams The query parameters
     * @param collectionQueryParams The collection query parameters
     * @return The full URL
     */
    public String buildUrl(String baseUrl, String path, List<Pair> queryParams, List<Pair> collectionQueryParams) {
        final StringBuilder url = new StringBuilder();
        if (baseUrl != null) {
            url.append(baseUrl).append(path);
        } else {
            String baseURL;
            if (serverIndex != null) {
                if (serverIndex < 0 || serverIndex >= servers.size()) {
                    throw new ArrayIndexOutOfBoundsException(String.format(
                    "Invalid index %d when selecting the host settings. Must be less than %d", serverIndex, servers.size()
                    ));
                }
                baseURL = servers.get(serverIndex).URL(serverVariables);
            } else {
                baseURL = basePath;
            }
            url.append(baseURL).append(path);
        }

        if (queryParams != null && !queryParams.isEmpty()) {
            // support (constant) query string in `path`, e.g. "/posts?draft=1"
            String prefix = path.contains("?") ? "&" : "?";
            for (Pair param : queryParams) {
                if (param.getValue() != null) {
                    if (prefix != null) {
                        url.append(prefix);
                        prefix = null;
                    } else {
                        url.append("&");
                    }
                    String value = parameterToString(param.getValue());
                    url.append(escapeString(param.getName())).append("=").append(escapeString(value));
                }
            }
        }

        if (collectionQueryParams != null && !collectionQueryParams.isEmpty()) {
            String prefix = url.toString().contains("?") ? "&" : "?";
            for (Pair param : collectionQueryParams) {
                if (param.getValue() != null) {
                    if (prefix != null) {
                        url.append(prefix);
                        prefix = null;
                    } else {
                        url.append("&");
                    }
                    String value = parameterToString(param.getValue());
                    // collection query parameter value already escaped as part of parameterToPairs
                    url.append(escapeString(param.getName())).append("=").append(value);
                }
            }
        }

        return url.toString();
    }

    /**
     * Set header parameters to the request builder, including default headers.
     *
     * @param headerParams Header parameters in the form of Map
     * @param reqBuilder Request.Builder
     */
    public void processHeaderParams(Map<String, String> headerParams, Request.Builder reqBuilder) {
        for (Entry<String, String> param : headerParams.entrySet()) {
            reqBuilder.header(param.getKey(), parameterToString(param.getValue()));
        }
        for (Entry<String, String> header : defaultHeaderMap.entrySet()) {
            if (!headerParams.containsKey(header.getKey())) {
                reqBuilder.header(header.getKey(), parameterToString(header.getValue()));
            }
        }
    }

    /**
     * Set cookie parameters to the request builder, including default cookies.
     *
     * @param cookieParams Cookie parameters in the form of Map
     * @param reqBuilder Request.Builder
     */
    public void processCookieParams(Map<String, String> cookieParams, Request.Builder reqBuilder) {
        for (Entry<String, String> param : cookieParams.entrySet()) {
            reqBuilder.addHeader("Cookie", String.format("%s=%s", param.getKey(), param.getValue()));
        }
        for (Entry<String, String> param : defaultCookieMap.entrySet()) {
            if (!cookieParams.containsKey(param.getKey())) {
                reqBuilder.addHeader("Cookie", String.format("%s=%s", param.getKey(), param.getValue()));
            }
        }
    }

    /**
     * Update query and header parameters based on authentication settings.
     *
     * @param authNames The authentications to apply
     * @param queryParams List of query parameters
     * @param headerParams Map of header parameters
     * @param cookieParams Map of cookie parameters
     * @param payload HTTP request body
     * @param method HTTP method
     * @param uri URI
     * @throws com.cashfree.ApiException If fails to update the parameters
     */
    public void updateParamsForAuth(String[] authNames, List<Pair> queryParams, Map<String, String> headerParams,
                                    Map<String, String> cookieParams, String payload, String method, URI uri) throws ApiException {
        for (String authName : authNames) {
            Authentication auth = authentications.get(authName);
            if (auth == null) {
                throw new RuntimeException("Authentication undefined: " + authName);
            }
            auth.applyToParams(queryParams, headerParams, cookieParams, payload, method, uri);
        }
    }

    /**
     * Build a form-encoding request body with the given form parameters.
     *
     * @param formParams Form parameters in the form of Map
     * @return RequestBody
     */
    public RequestBody buildRequestBodyFormEncoding(Map<String, Object> formParams) {
        okhttp3.FormBody.Builder formBuilder = new okhttp3.FormBody.Builder();
        for (Entry<String, Object> param : formParams.entrySet()) {
            formBuilder.add(param.getKey(), parameterToString(param.getValue()));
        }
        return formBuilder.build();
    }

    /**
     * Build a multipart (file uploading) request body with the given form parameters,
     * which could contain text fields and file fields.
     *
     * @param formParams Form parameters in the form of Map
     * @return RequestBody
     */
    public RequestBody buildRequestBodyMultipart(Map<String, Object> formParams) {
        MultipartBody.Builder mpBuilder = new MultipartBody.Builder().setType(MultipartBody.FORM);
        for (Entry<String, Object> param : formParams.entrySet()) {
            if (param.getValue() instanceof File) {
                File file = (File) param.getValue();
                addPartToMultiPartBuilder(mpBuilder, param.getKey(), file);
            } else if (param.getValue() instanceof List) {
                List list = (List) param.getValue();
                for (Object item: list) {
                    if (item instanceof File) {
                        addPartToMultiPartBuilder(mpBuilder, param.getKey(), (File) item);
                    } else {
                        addPartToMultiPartBuilder(mpBuilder, param.getKey(), param.getValue());
                    }
                }
            } else {
                addPartToMultiPartBuilder(mpBuilder, param.getKey(), param.getValue());
            }
        }
        return mpBuilder.build();
    }

    /**
     * Guess Content-Type header from the given file (defaults to "application/octet-stream").
     *
     * @param file The given file
     * @return The guessed Content-Type
     */
    public String guessContentTypeFromFile(File file) {
        String contentType = URLConnection.guessContentTypeFromName(file.getName());
        if (contentType == null) {
            return "application/octet-stream";
        } else {
            return contentType;
        }
    }

    /**
     * Add a Content-Disposition Header for the given key and file to the MultipartBody Builder.
     *
     * @param mpBuilder MultipartBody.Builder 
     * @param key The key of the Header element
     * @param file The file to add to the Header
     */ 
    private void addPartToMultiPartBuilder(MultipartBody.Builder mpBuilder, String key, File file) {
        Headers partHeaders = Headers.of("Content-Disposition", "form-data; name=\"" + key + "\"; filename=\"" + file.getName() + "\"");
        MediaType mediaType = MediaType.parse(guessContentTypeFromFile(file));
        mpBuilder.addPart(partHeaders, RequestBody.create(file, mediaType));
    }

    /**
     * Add a Content-Disposition Header for the given key and complex object to the MultipartBody Builder.
     *
     * @param mpBuilder MultipartBody.Builder
     * @param key The key of the Header element
     * @param obj The complex object to add to the Header
     */
    private void addPartToMultiPartBuilder(MultipartBody.Builder mpBuilder, String key, Object obj) {
        RequestBody requestBody;
        if (obj instanceof String) {
            requestBody = RequestBody.create((String) obj, MediaType.parse("text/plain"));
        } else {
            String content;
            if (obj != null) {
                content = JSON.serialize(obj);
            } else {
                content = null;
            }
            requestBody = RequestBody.create(content, MediaType.parse("application/json"));
        }

        Headers partHeaders = Headers.of("Content-Disposition", "form-data; name=\"" + key + "\"");
        mpBuilder.addPart(partHeaders, requestBody);
    }

    /**
     * Get network interceptor to add it to the httpClient to track download progress for
     * async requests.
     */
    private Interceptor getProgressInterceptor() {
        return new Interceptor() {
            @Override
            public Response intercept(Interceptor.Chain chain) throws IOException {
                final Request request = chain.request();
                final Response originalResponse = chain.proceed(request);
                if (request.tag() instanceof ApiCallback) {
                    final ApiCallback callback = (ApiCallback) request.tag();
                    return originalResponse.newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), callback))
                        .build();
                }
                return originalResponse;
            }
        };
    }

    /**
     * Apply SSL related settings to httpClient according to the current values of
     * verifyingSsl and sslCaCert.
     */
    private void applySslSettings() {
        try {
            TrustManager[] trustManagers;
            HostnameVerifier hostnameVerifier;
            if (!verifyingSsl) {
                trustManagers = new TrustManager[]{
                        new X509TrustManager() {
                            @Override
                            public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException {
                            }

                            @Override
                            public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException {
                            }

                            @Override
                            public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                                return new java.security.cert.X509Certificate[]{};
                            }
                        }
                };
                hostnameVerifier = new HostnameVerifier() {
                    @Override
                    public boolean verify(String hostname, SSLSession session) {
                        return true;
                    }
                };
            } else {
                TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());

                if (sslCaCert == null) {
                    trustManagerFactory.init((KeyStore) null);
                } else {
                    char[] password = null; // Any password will work.
                    CertificateFactory certificateFactory = CertificateFactory.getInstance("X.509");
                    Collection<? extends Certificate> certificates = certificateFactory.generateCertificates(sslCaCert);
                    if (certificates.isEmpty()) {
                        throw new IllegalArgumentException("expected non-empty set of trusted certificates");
                    }
                    KeyStore caKeyStore = newEmptyKeyStore(password);
                    int index = 0;
                    for (Certificate certificate : certificates) {
                        String certificateAlias = "ca" + (index++);
                        caKeyStore.setCertificateEntry(certificateAlias, certificate);
                    }
                    trustManagerFactory.init(caKeyStore);
                }
                trustManagers = trustManagerFactory.getTrustManagers();
                hostnameVerifier = OkHostnameVerifier.INSTANCE;
            }

            SSLContext sslContext = SSLContext.getInstance("TLS");
            sslContext.init(keyManagers, trustManagers, new SecureRandom());
            httpClient = httpClient.newBuilder()
                            .sslSocketFactory(sslContext.getSocketFactory(), (X509TrustManager) trustManagers[0])
                            .hostnameVerifier(hostnameVerifier)
                            .build();
        } catch (GeneralSecurityException e) {
            throw new RuntimeException(e);
        }
    }

    private KeyStore newEmptyKeyStore(char[] password) throws GeneralSecurityException {
        try {
            KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
            keyStore.load(null, password);
            return keyStore;
        } catch (IOException e) {
            throw new AssertionError(e);
        }
    }

    /**
     * Convert the HTTP request body to a string.
     *
     * @param requestBody The HTTP request object
     * @return The string representation of the HTTP request body
     * @throws com.cashfree.ApiException If fail to serialize the request body object into a string
     */
    private String requestBodyToString(RequestBody requestBody) throws ApiException {
        if (requestBody != null) {
            try {
                final Buffer buffer = new Buffer();
                requestBody.writeTo(buffer);
                return buffer.readUtf8();
            } catch (final IOException e) {
                throw new ApiException(e);
            }
        }

        // empty http request body
        return "";
    }
}

    public static class PGWebhookEvent {
        String type;
        String rawBody;
        Object object;

        PGWebhookEvent(String type, String rawBody, Object object) {
            this.type = type;
            this.rawBody = rawBody;
            this.object = object;
        }
    }
    
}
